*** Variables ***

$primary-color: #326dee;
$seconary-color: #1ac886;

===========================================================================================================================
*** Partials ***
A file that holds all the sass variables we decalre.
The file name should start with an underscore
_palette.scss

In the destination scss file you can import this partial and use the variables
@import "../assets/palette";

How do we export sass variables from partials to be used inside javascript?
Ans: $primary: #326dee;

     :export {
        primary: $primary
     }
============================================================================================================================
*** Nested Rules ***

.card {
   padding: 1rem;
   color: $primary;
   .title {
      font-size: 1rem;
   }
   .img {
      width: 100%;
      height: 100%;
      object-fit: cover;
   }
}

===========================================================================================================================
*** Using Math ***

$base-font-size: 1rem;
$font-size-sm: $base-font-size * 0.75;
$font-size-lg: $base-font-size * 1.5;

In order to do division, we need to use the "math" module
@use 'sass:math';

.card {
   border-radius: math.div($base-border-radius, 4);
}

If you want to console log something from sass file, use the the debug module
@debug "Hello World!"
@debug math.div(10, 3)
@debug math.max(1px, 20px, 12px, 5px)
===========================================================================================================================
*** Maps ***

$colors: (
    "primary": $primary,
    "secondary": $secondary,
    "error": $error,
    "success": $success,
    "white": #ffffff,
    "black": #000000,
)

A map is defined as above.

.text {
    color: map-get($colors, "white")
}

@debug map-has-key($colors, "purple") // will return false
@debug map-has-key($colors, "black") // will return true
@debug map-remove($colors, "primary") // will log the map after removing the primary key
@debug map-merge($colors, ("pink": #ffc0cb)) // will log the map after merging the colors map with the new map

==========================================================================================================================
*** Loops ***

We loop through the map, get the key and value from it and use these keys and values to define more classes.
We then use the for loop inside the each loop to make the light and dark varients of the classes

@each $key, $val in $colors {
    .text-#{$key} {
        color: $val;
    }
    .bg-#{$key} {
        background-color: $val;
    }
    
    @for $i from 1 through 9 {
        .text-#{$key}-light-#{$i} {
             color: mix(white, $val, $i * 10)
        }
    }
}


The sass compiles the above code to following
.text-primary {
    color: #d32752;
}
.bg-primary {
    background-color: #d32752;
}
.text-primary-light-1 {
    color: #eda9ba
}

if you want to export your colors map so you can use it in Javascript

:export {
   @each $key, $val in $colors {
      #{unquote($key)}: $val;
   }
}

========================================================================================================================
