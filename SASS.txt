*** Variables ***

$primary-color: #326dee;
$seconary-color: #1ac886;

===========================================================================================================================
*** Partials ***
A file that holds all the sass variables we decalre.
The file name should start with an underscore
_palette.scss

In the destination scss file you can import this partial and use the variables
@import "../assets/palette";

How do we export sass variables from partials to be used inside javascript?
Ans: $primary: #326dee;

     :export {
        primary: $primary
     }
============================================================================================================================
*** Nested Rules ***

.card {
   padding: 1rem;
   color: $primary;
   .title {
      font-size: 1rem;
   }
   .img {
      width: 100%;
      height: 100%;
      object-fit: cover;
   }
}

===========================================================================================================================
*** Using Math ***

$base-font-size: 1rem;
$font-size-sm: $base-font-size * 0.75;
$font-size-lg: $base-font-size * 1.5;

In order to do division, we need to use the "math" module
@use 'sass:math';

.card {
   border-radius: math.div($base-border-radius, 4);
}

If you want to console log something from sass file, use the the debug module
@debug "Hello World!"
@debug math.div(10, 3)
@debug math.max(1px, 20px, 12px, 5px)
===========================================================================================================================
*** Maps ***

$colors: (
    "primary": $primary,
    "secondary": $secondary,
    "error": $error,
    "success": $success,
    "white": #ffffff,
    "black": #000000,
)

A map is defined as above.

.text {
    color: map-get($colors, "white")
}

A map can have other maps defined inside it

$utilities: (
    "padding": (
         "prefix": "p",
         "values": (
              "0": 0,
              "1": $base-padding,
              "2": $base-padding * 2,
         )
    )
)

@debug map-has-key($colors, "purple") // will return false
@debug map-has-key($colors, "black") // will return true
@debug map-remove($colors, "primary") // will log the map after removing the primary key
@debug map-merge($colors, ("pink": #ffc0cb)) // will log the map after merging the colors map with the new map

==========================================================================================================================
*** Loops ***

We loop through the map, get the key and value from it and use these keys and values to define more classes.
We then use the for loop inside the each loop to make the light and dark varients of the classes

@each $key, $val in $colors {
    .text-#{$key} {
        color: $val;
    }
    .bg-#{$key} {
        background-color: $val;
    }
    
    @for $i from 1 through 9 {
        .text-#{$key}-light-#{$i} {
             color: mix(white, $val, $i * 10)
        }
    }
}


The sass compiles the above code to following
.text-primary {
    color: #d32752;
}
.bg-primary {
    background-color: #d32752;
}
.text-primary-light-1 {
    color: #eda9ba
}

if you want to export your colors map so you can use it in Javascript

:export {
   @each $key, $val in $colors {
      #{unquote($key)}: $val;
   }
}

========================================================================================================================
*** if ***

@if ($val != $black and $val != white){
     ...rest of the code
} @else {
     ...rest of the code
}

========================================================================================================================
*** Parent Selectors ***

& is the parent selector

.parent {
    color: $primary;
    
    &:hover {
        color: $info;
    }
    
    &:last-child {
        color: $error;
    }
    
    &:nth-child(2) {
        color: $black;
    }
}

==========================================================================================================================
*** Mixins and @include ***

Mixins allow you to create css rules once and use it in various places.
Mixins can also take variables are arguments and use these variables in the mixin definition

@mixin btn($bg-color: #e2e2e2) {
   text-decoration: none;
   cursor: pointer;
   display: inline-block;
   border: 0;
   padding: $base-padding $base-padding*2;
   border-radius: $base-border-radius;
   background-color: $bg-color;
   @content; -----------------------------> notice how we add @content, this will help us add any extra content from wherever this mixin is invoked
}

.btn {
    @include btn; ------------------------> notice how we haven't provided the parenthesis or any arguments, hence $bg-color will take the default value ie: #e2e2e2
}

.another-btn {
    @include btn {
         color: red; ----------------------> this becomes the extra content, this button will have all the styles the btn mixin has + color: red; because we added @content
    }
}

@each $key, $val in $colors {
    .btn-#{$key} {
         @include btn($val);
         
         &:hover {
              background-color: lighten($val, 5);
         }
    }
    .btn-outlined-#{$key} {
         @include btn($white);
         border: $base-border-thickness solid $val;
    }
}

==============================================================================================================================
*** Functions ***

@function light-comp($color) {
    $complement: complement($color);
    $light-complement: lighten($complement, 30%);
    
    @return $light-complement
}

.text {
    color: light-comp(#e2e2e2);
}

==============================================================================================================================
*** Making Utility Classes ***

$utilities: (
    "padding": (
         "prefix": "p",
         "values": (
              "0": 0,
              "1": $base-padding,
              "2": $base-padding * 2,
         )
    )
    "font-size": (
         "prefix": "f",
         "values": (
              "sm": $font-size-sm,
              "md": $base-font-size,
              "lg": $font-size-lg,
         )
    )
)

@each $property, $map in $utilities {
    $prefix: map-get($map, "prefix");
    $values: map-get($map, "values");
    
    @each $k, $v in $values {
         @if($k == "default") {
              .#{$prefix} {
                   #{$property}: $v
              }
         } @else {
              .#{$prefix}-#{$k}{
                   #{$property}: $v
              }
         }
    }
}

=================================================================================================================================
*** Media Queries ***

$breakpoints: (
    "xs": 0,
    "sm": 480px,
    "md": 720px,
    "lg": 960px,
    "xl": 1200px,
)

@mixin xs {
    @media (min-width: map-get($breakpoints, "xs")) {
         @content;
    }
}


@mixin md {
    @media (min-width: map-get($breakpoints, "md")) {
         @content;
    }
}

.responsive-text {
    @include xs {
         color: red;
         font-size: 8px;
    }
    @include md {
         color: blue;
         font-size: 14px;
    }
}

===========================================================================================================================
@extend

.flex-layout {
     width: 100%;
     display: flex;
     align-items: center;
     justify-content: space-between;
     box-sizing: border-box;
}

.navbar {
     @extend .flex-layout;
     padding: 8px 16px;
}
