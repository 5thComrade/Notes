Exam Code: CLF - C01

Exams
1: aws certified cloud practitioner
2: aws certified solutions architect
3: aws certified sysops administrator
4: aws certified developer

==========================================================================================================================
Cloud Computing

- Cloud Computing is the on-demand delivery of compute power, database storage, applications, and other IT resources with pay-as-you-go pricing model.

- Deployment Models of the Cloud
* Private Cloud - Cloud services used by a single organization, not exposed to the public. Example: Rackspace
* Public Cloud - Cloud resources owned and operated by a third party cloud service provider delivered over the internet. Example: AWS, Azure
* Hybrid Cloud - Keep some servers on premises and extend some capabilities to the cloud.

5 characteristics of cloud computing
- On-demand self-service
- Broad network access
- Multi-tenancy and resource pooling
- Rapid elasticity and scalability
- Measured service

6 advantages of cloud computing
- Reduced Total Cost of Ownership(TCO) and Operational Expense
- Prices are reduced as AWS is more efficient due to large scale
- Scale based on actual measured usage
- Increase speed and agility
- Stop spending money running and maintaining data centers
- Go global in minutes

Types of Cloud Computing
- Infrastructure as a Service (IaaS)
- Platform as a Service (PaaS)
- Software as a Service (SaaS)

On-Premises --> Applications, Data, Runtime, Middleware, OS, Virtualization, Servers, Storage, Networking
IaaS ---------> Applications, Data, Runtime, Middleware, OS (Example: AWS EC2, Azure, Digital Ocean)
PaaS ---------> Applications, Data (Example: AWS Elastic Beanstalk, Heroku, Google App Engine)
SaaS ---------> 

============================================================================================================================
How to choose an AWS Region?
- Compliance with data governance and legal requirements.
- Proximity to customers
- Available services within a region
- Pricing

A region is comprised of multiple availability zones

Shared Responsibility Model
- Customer is responsible for - Security in the cloud, it's customer data, platform, IAM, OS, Network and Firewall configuration
- AWS is responsible for - Security of the cloud, hardware, regions etc

===========================================================================================================================
IAM - Identity and Access Management

When you create an AWS account, you are actually creating a root account. One should never use the root account.
Create users/groups within IAM with restricted access. Users/groups can be assigned IAM policies. These policies define the permissions
of the users. In AWS you apply the least privilage principle, don't give more permissions than a user needs.

To login as an IAM user, you need the AWS account id/AWS account alias, user-id, and password. If MFA is enabled, even MFA key.

Always set a Password Policy for all IAM users to ensure good security.

MFA - Multi Factor Authentication
MFA device options
1: Virtual MFA device(Google Authenticator, Authy)
2: Universal 2nd Factor(U2F) Security device (YubiKey by Yubico) - this is a physical key
3: Hardware Key Fob MFA device
4: Hardware Key Fob MFA device for AWS GovCloud(US)

MFA can be set under "My Security Credentials" page

How to access your AWS?
1: AWS Management Console (protected by password + MFA)
2: AWS Command Line Interface: CLI (protected by access keys)
3: AWS Software Development Kit: SDK - for code (protected by access keys)

You could install AWS CLI from aws on your system, open command prompt and run the following command to verify the installation.
aws --version

If you have permission issues (like I have on my company laptop), you can use AWS CloudShell 
This is a browser simulation of a command prompt which has aws cli, node and other things pre-installed.
You can practice your cli skills on it.

- IAM Roles
Some AWS service will need to perform actions on your behalf.
Ex: If Lambda needs to reach out to S3, lambda needs permissions, these permissions are called IAM Roles

- IAM Security tools
1: IAM Credentials Report (account-level)
2: IAM Access Advisor (user-level)

-IAM Best Practices
1: Do not use the root account, except for AWS account setup
2: One Physical user = One AWS user
3: Assign users to groups and assign permissions to groups
4: Create a strong password policy
5: Use and enforce MFA
6: Create and use Roles for giving permissions to AWS services
7: Use Access Keys for Programmatic Access (CLI/SDK)
8: Audit permissions of your account with IAM Credentials Report

- IAM Shared Responsibility Model
AWS - Infrastructure, Configuration and Vulnerability analysis, compliance validation
YOU - Users, Groups, Roles, Policies and monitoring

=================================================================================================================================================================
AWS Budget Setup

For billing information, navigate to "My Billing Dashboard"
By default IAM users do not have access to billing information.
The access needs to be given by the root user by activating "Activate IAM Access", this will ensure that users who are admins have access to billing information.

One can setup a budget and a budget threshold for your aws usage and aws will notify you when the expense reaches the threshold.

=================================================================================================================================================================
AWS EC2

EC2 = Elastic Compute Cloud
Infrastructure as a Service
 
- Renting virtual machines (EC2)
- Storing data on virtual drives (EBS)
- Distributing load across machines (ELB)
- Scaling the services using an auto-scaling group (ASG)

EC2 User Data
It is possible to bootstrap our instances using an EC2 User Data script.
The script is only run once at the instance first start.
EC2 user data is used to automate boot tasks such as installing updates, installing software etc

To launch an EC2 instance
1: Choose an Amazon Machine Image (AMI)
2: Choose an Instance Type
3: Configure instance details (user data, iam roles)
4: Add storage
5: Add tags
6: Configure Security Group (adding http rule to your instance)

EC2 Instance Types
1: General Purpose 
   Example: t2.micro
   Great for a diversity of workloads such as web servers or code repositories
   Balance between compute, memory, and networking
2: Compute Optimized
   Example: c5.xlarge
   Great for compute-intensive tasks that require high performance processors: batch processing workloads, media transcoding, high performance web servers,
   high performance computing, scientific modeling, machine learning, dedicated gaming servers
3: Memory Optimized
   Example: r5a.4xlarge
   Fast performance for workloads that process large data sets in memory
   Use Cases: High performance relational/non-relational databases, distributed web scale cache stores, in-memory databases optimized for BI(business intelligence)
   applications performing real-time processing of big unstructured data
4: Storage Optimized
   Example: d3.8xlarge
   Great for storage-intensive tasks that require high, sequenial read and write access to large data sets on local storage.
   Use cases: High freguency online transaction processing (OLTP) systems, Relational and NoSQL databases, cache for in-memory databases(redis), data warehousing
   applications, distributed file systems
   
- EC2 Security Groups
Security groups control how the traffic is allowed into or out of your EC2 instances.
Security groups are acting as a firewall on EC2 instances
They regulate access to ports, authorised IP ranges IPv4 and IPv6, control the inbound and outbound network

Classic Ports to know
Port 22 = SSH (Secure Shell) log into a linux instance
Port 21 = FTP (File Transfer Protocol) upload files into a file share
Port 22 = SFTP (Secure File Transfer Protocol) upload files using SSH
Port 80 = HTTP access unsecured websites
Port 443 = HTTPS access secured websites
Port 3389 = RDP (Remote Desktop Protocol) log into a Windows instance

The easiest way to connect to your linux instance is EC2 Instance Connect using the web browser.
Instance connect uses the SSH protocol to connect to your EC2 instance and opens a terminal in your browser(very cool!).
One could also ssh from their windows systems directly using the following command

ssh -i {PATH_TO_PEM_FILE} ec2-user@{PUBLIC_IP_OF_INSTANCE}

pem file is generated when you create a key pair.

DO NOT RUN aws configure command in your ec2 instance and enter your IAM credentials, instead attach an IAM Role to the EC2 instance.

- EC2 Instance Purchasing Options
1: On-Demand Instances: short workload, predictable pricing
   - Pay for what you use
   - Has the highest cost but no upfront payment
   - No long-term commitment
   - Recommended for short-term and un-interrupted workloads, where you can't predict how the application will behave
2: Reserved Instances: Minimum 1 year, upto 75% discount compared to On-demand
   - Reserved Instances: long workloads, cannot change instance type for the commited period.
   - Convertible Reserved Instances: long workloads with flexible instances types, can change the instance type if you want to. Up-to 54% discount.
   - Scheduled Reserved Instances: every Thursday between 3 and 6pm
3: Spot Instances: short workloads, cheap, can lose instances (less reliable), upto 90% discount. Useful for workloads that are resilient to failure. Ex: batch jobs, data      analysis, image processing, any distributed workloads.
4: Dedicated Hosts: book an entire physical server, control instance placement. compliance requirements and use your existing server-bound software licenses. Most expensive.

- EC2 Shared Responsibility Model
AWS is responsible for infrastructure, replacing faulty hardware, compliance validation
User is responsible for security groups rules, operating-system patches and updates, software and utilities installed on the EC2 instance, IAM roles assigned to the ec2 instance, data security on your instance.

=============================================================================================================================================================================
EC2 Instance Storage

An EBS(Elastic Block Store) Volume is a network drive you can attach to your instances while they run.
It allows your instances to persist data, even after their termination.
They can only be mounted to one instance at a time.
It uses the network to communicate with the instance, which means there might be a bit of latency.
It can be detached from an EC2 instance and attached to another one quickly
Its locked to an Availability Zone, to move a volume you need to take a snapshot of it
One needs to provision the EBS Volume beforehand by telling how many Gbs and IOPS(Input Output per second) one needs.

When an EC2 instance is created, the user is prompted with a choice related to the EBS Volume
"Delete on Termination" if one checks this box, the EBS Volume attached to the EC2 instance will get deleted once the instance is terminated.
The root volume attached to the instance has the delete on termination selected by default, however if you attach additional ebs volumes apart from 
the root volume, they are not deleted when the instance is terminated.


