Design Patterns

A pattern is a reusable solution that can be applied to commonly occuring problems in software design.

Why use patterns?
1: Patterns are proven solutions.
2: Patterns can be easily reused.


Design Pattern Categories
1: Creational Design Patterns
Creational design patterns focus on handling object creation mechanisms where objects are created in a manner suitable for the situation we're working in. 
The basic approach to object creation might otherwise lead to added complexity in a project whilst these patterns aim to solve this problem 
by controlling the creation process.
Some of the patterns that fall under this category are: Constructor, Factory, Abstract, Prototype, Singleton and Builder.

2: Structural Design Patterns
Structural patterns are concerned with object composition and typically identify simple ways to realize relationships between different objects.
Patterns that fall under this category include: Decorator, Facade, Flyweight, Adapter and Proxy.

3: Behavioral Design Patterns
Behavioral patterns focus on improving or streamlining the communication between disparate objects in a system.
Some behavioral patterns include: Iterator, Mediator, Observer and Visitor.

------------------------------
Design Patterns in JavaScript
------------------------------

1: The Constructor Pattern
