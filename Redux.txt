Redux

- Redux is a state-management system for cross-component or app-wide state.

                dispatch actions
- Component -----------------------> Reducer Function --------------->
     |                                                               |
     |                                                               |
     |   Subscription                                                | 
     <------------------ Central Data Store -----------<--------------           

- Reducer is a function, it takes 2 values as its arguments
  1: Old State Object
  2: Dispatched Action
  Reducer always outputs a New State Object   

- We can create a store using the createStore() method from the redux package
  createStore() takes the reducer as its argument.
  
  const store = redux.createStore(counterReducer);

- We need to wrap our entire App component with the Provider component we import from react-redux package.

  <Provider store={store}>
     <App />
  </Provider>

- Now inside our component where we need the state, we will need the useSelector() method from react-redux;
  We can use useSelector() multiple times in our component to access various parts of our store.
  const counter = useSelector(state => state.counter);
  const show = useSelector(state => state.showCounter);

  We can now use the counter value in our component.

- To dispatch actions we need another method from react-redux package, useDispatch();
  useDispatch() method returns a function, we will save it in a dispatch constant.
  const dispatch = useDispatch();

  const incrementHandler = () => {
     dispatch({ type: "INCREMENT" });
  }                                  

==========================================================================================================================================
We will use @reduxjs/toolkit and react-redux for our state management.
@reduxjs/toolkit also installs redux, so we need not separately install redux.

import { createSlice, configureStore } from "@reduxjs/toolkit";

const initialCounterState = { value: 0, showCounter: true };
const initialAuthState = { isAuthenticated: false };

const counterSlice = createSlice({
  name: 'counter',
  initialState: initialCounterState,
  reducers: {
	increment(state) {
      	   state.value++
        },
        decrement(state) {
	   state.value--
        },
        increase(state, action) {
  	   state.value = state.value + action.payload
        },
        toggleCounter(state) {
	   state.showCounter = !state.showCounter
        },
  }
});

const authSlice = createSlice({
   name: 'auth',
   initialState: initialAuthState,
   reducers: {
   	login(state) {
          state.isAuthenticated = true;
        },
        logout(state) {
	  state.isAuthenticated = false;
        },
   }
})

const store = configureStore({
   reducer: {
     counter: counterSlice.reducer,
     auth: authSlice.reducer,
   }
});

export const counterActions = counterSlice.actions;
export const authActions = authSlice.actions;

export default store;


- We now need to wrap our entire App component with the Provider component that we imported from react-redux, with the store prop.
- We will import counterActions and authActions in the component where we will dispatch actions.
- We will still use the useDispatch() method we imported from react-redux to dispatch actions
  const dispatch = useDispatch();
  const incrementHandler = () => {
    dispatch(counterActions.increment()) //when you execute the increment method it will return the dispatch object
  }
  const increaseHandler = () => {
    dispatch(counterActions.increase(5)) //when you have payload, the object returned by increase method will be { type: increase, payload: 5 }
  }
  const loginHandler = () => {
    dispatch(authActions.login())
  }
  const logoutHandler = () => {
    dispatch(authActions.logout())
  }

- If we want to use some state value in our component we will still need useSelector() we import from react-redux

  const counterValue = useSelector(state => state.counter.value) //counter is the reducer we set in the configureStore()
  const show = useSelector(state => state.counter.showCounter)
  const isAuthenticated = useSelector(state => state.auth.isAuthenticated)

========================================================================================================================================================
Advanced Redux
There are two ways to perform async activities in redux
1: Complete the async activities in the component(eg useEffect);
2: Inside our action creators

=========================================================================================================================================================
Redux toolkit fresh start

Step 1: Install 2 pachakes
1: react-redux
2: @reduxjs/toolkit

-------------------------------------------------------------------------------------------

Step 2: Configure the store
Create a new directory in the source folder called store.
Within the store folder crete a new file called store.js

import { configureStore } from "@reduxjs/toolkit";

export const store = configureStore({
  reducer: {},
});

---------------------------------------------------------------------------------------------

Step 3: Wrap the app with the Provider and pass the newly configured store to the Provider

import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import {store} from "./appStore/store"
import {Provider} from "react-redux"

store.dispatch(fetchTheme()) ---------------> *** if you want to dispatch an action before the app loads ***

ReactDOM.render(
  <React.StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </React.StrictMode>,
  document.getElementById("root")
);

--------------------------------------------------------------------------------------------

Step 4: Now its time to create individual reducers for specific features.
We use createSlice to define our actions and reducer.

import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  count: 0,
};

export const counterSlice = createSlice({
  name: "counter",
  initialState,
  reducers: {
    increment: (state) => {
      state.count += 1;
    },
    decrement: (state) => {
      state.count -= 1;
    },
    reset: (state) => {
      state.count = 0;
    },
    incrementByAmount: (state, action) => {
      state.count += action.payload;
    },
  },
});

export const { increment, decrement, reset, incrementByAmount } = counterSlice.actions;

export default counterSlice.reducer;

-------------------------------------------------------------------------------------------

Step 5: Import this reducer in the store and add it to the reducer

import counterReducer from "../features/counter/counterSlice";

export const store = configureStore({
  reducer: {
    counterReducer,
  },
});

-------------------------------------------------------------------------------------------

Step 6: Now start using the state and actions in your components

import { useSelector, useDispatch } from "react-redux";
import { increment, decrement } from "./counterSlice";

const Counter = () => {
  const count = useSelector((state) => state.counterReducer.count);
  const dispatch = useDispatch();

  return (
    <section>
      <p>{count}</p>
      <div>
        <button onClick={() => dispatch(increment())}>+</button>
        <button onClick={() => dispatch(decrement())}>-</button>
	<button onClick={() => dispatch(reset())}>Reset</button>
        <button onClick={() => dispatch(incrementByAmount(5))}>plus 5</button>
      </div>
    </section>
  );
};

export default Counter;

=============================================================================================================================
In the createSlice function, inside reducers we define various actions and their corresponding reducer
Example: 
const postSlice = createSlice({
	name: "posts",
	initialState,
	reducers: {
		postAdded: (state, action) => {
			state.push(action.payload)
		}
	}
})

Now we can define the function that updates the state for this action inside the action definition
const postSlice = createSlice({
	name: "posts",
	initialState,
	reducers: {
		postAdded: {
			reducer(state, action) {
				state.push(action.payload)
			},
			prepare(title, content) {
				return {
				   payload: {
				   	id: nanoid(),
					title,
					content,
				   }
				}
			}
		}
	}
})

Now in the component when you dispatch the action
Earlier we used to do 
dispatch(postAdded({id: nanoid(), title, content})) --------------> old way of dispatching action with payload

With the new style, we can simply do as follows
dispatch(postAdded(title, content)) ------------------------------> new way of dispatching action with content for the payload

====================================================================================================================================
Async Redux toolkit
In Redux toolkit we can use createAsyncThunk to create actions that require async operations.
The createAsyncThunk will create 3 action types pending, fulfilled, rejected
These actions must be handled in the extraReducers property in the createSlice method.

Lets talk a little about extraReducers.
There are 2 ways to handle reducers in extraReducers
- 1st Method: the builder addCase chain

	const usersSlice = createSlice({
		name: "users",
		initialState,
		reducers: {},
		extraReducers(builder){
			builder.addCase(fetchUsers.pending, (state, action) => {
				state.loading = true
			}).addCase(fetchUsers.fulfilled, (state, action) => {
				state.loading = false
				state.users = action.payload
			}).addCase(fetchUsers.rejected, (state, action) => {
				state.loading = false
				state.users = []
				state.error = action.payload
			})
		}
	})
	
- 2nd Method: direct reducer

	const usersSlice = createSlice({
		name: "users",
		initialState,
		reducers: {},
		extraReducers: {
			[fetchUsers.pending]: (state, action) => {
				state.loading = true
			},
			[fetchUsers.fulfilled]: (state, action) => {
				state.loading = false
				state.users = action.payload
			},
			[fetchUsers.rejected]: (state, action) => {
				state.loading = false
				state.users = []
				state.error = action.payload
			}
		}
	})
	
Now lets get back to async operations in redux/toolkit

export const fetchUsers = createAsyncThunk("posts/fetchUsers", async () => {
  try {
    const response = await axios.get(USERS_URL);
    return [...response.data]; -----------------------------------> this array becomes the payload for type: "posts/fetchUsers/filfilled"
  } catch (err) {
    return err.message; ------------------------------------------> this message becomes the payload for type: "posts/fetchUsers/rejected"
  }
});

As mentioned earlier createAsyncThunk returns 3 actions
1: {type: "posts/fetchUsers/pending", payload: undefined}
2: {type: "posts/fetchUsers/filfilled", payload: [1, 2, 3]} --------> payload is whatever you return from the createAsyncThunk method
3: {type: "posts/fetchUsers/rejected", payload: "Unable to make the network request"}

These actions must be handled in the extraReducers in the createSlice method.

** console.log(await dispatch(fetchUsers()).unwrap()) -----> unwrap is a method given by the toolkit which returns the payload of the action object
if the action object is {type: "posts/fetchUsers/filfilled", payload: [1, 2, 3]}
the above console log will be [1, 2, 3]

===========================================================================================================================================
MY STRATEGY FOR A SCALABLE STORE

The initial store setup as mentioned above
Here we will talk about actions and reducers residing in their respective files
For each feature we will have a corresponding action and reducer file

create a folder for your feature
in this folder create two files
1: actions.js
2: slice.js

---------------------------------------------------------------------------------------------------------------------
Inside actions.js
In the example below we have created 2 actions one using the normal createAction method and another one using createAsyncThunk.
Import these actions in your components and dispatch
The key point of difference between these actions are
1: for createAction you need to return an object with the payload property, whereas for createAsyncThunk whatever you return is the payload
2: createAction only creates 1 action object, whereas createAsyncThunk creates 3 action objects internally

import { createAction, createAsyncThunk } from "@reduxjs/toolkit";
import axios from "axios";

const USERS_URL = "https://jsonplaceholder.typicode.com/users";

export const incrementByValue = createAction(
  "someFeature/incrementByValue",
  (value) => {
    return {
      payload: value,
    };
  }
);

export const getSomeUsers = createAsyncThunk(
  "someFeature/getSomeUsers",
  async () => {
    try {
      const response = await axios.get(USERS_URL);
      return { users: response.data }; 
    } catch (err) {
      return err.message;
    }
  }
);

------------------------------------------------------------------------------------------------------------------------------
Inside slice.js
Import the actions from the actions files and define these actions in the extraReducers
Also export the reducer and configure it in the store

import { createSlice } from "@reduxjs/toolkit";
import { incrementByValue, getSomeUsers } from "./actions";

const initialState = {
  total: 0,
  usersLoading: false,
  users: [],
  usersFetchFailed: ""
};

const someFeatureSlice = createSlice({
  name: "someFeature",
  initialState,
  reducers: {},
  extraReducers: {
  	[incrementByValue]: (state, action) => {
		state.total =  action.payload
	},
	[getSomeUsers.pending]: (state, action) => {
		state.usersLoading = true
	},
	[getSomeUsers.fulfilled]: (state, action) => {
		state.usersLoading = false
		state.users = action.payload
	}
	[getSomeUsers.rejected]: (state, action) => {
		state.usersLoading = false
		state.users = []
		state.usersFetchFailed = action.payload
	}
  },
});

export default someFeatureSlice.reducer;

===========================================================================================================================================
Redux Optimisations

1: Memoise your selectors by using createSelector
2: It is recommended to use normalised state structure for your redux state and it can be achieved by using createEntityAdapter
===========================================================================================================================================
