NextJS 13

Pre-rendering
By default, NextJS pre-renders every page. This means that NextJS generates HTML for each page in advance, instead of having it all done by client-side JavaScript.
Each generated HTML is associated with minimal JavaScript code necessary for that page. When a page is loaded by the browser, its JavaScript code runs and makes the page
fully interactive. This process is called hydration.

Two forms of pre-rendering
- Static Generation: The HTML is generated at build time and will be reused on each request.
- Server-side rendering: The HTML is generated on each request.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Routing
- Pages
Create a new folder in the app directory and name this new folder with the desired route name
Example: /about
Now add a page.tsx file inside this directory and the jsx inside this page will be rendered when we navigate to this route.

- Layouts
If you want to add a layout to a page, just add another file called layout.tsx in the same folder and the page will be rendered as a child of this layout.
Each route can have its own layout.tsx file if necessary.

To navigate between pages import the Link component from "next/link"
<Link href="/">Link to Home Page</Link>

To create dynamic routes
First create a folder with the following naming convention
[id]
Within the [id] folder, create a page.tsx. You will be able to access the id value within the page.

Sometimes we may want to group certain folders under one category but don't want that category to be a part of the route
Then we create a new folder like this (auth)
dashboard/(auth)/login
dashboard/(auth)/register

Both login and register folders are inside the (auth) folder. But when we naigate to the login page our url will not have (auth)
dashboard/login

You can add loading.tsx and error.tsx files to your route folders to handle loading and errors.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Rendering

- Server Side Rendering
All components by default are server components, ie its rendered on the server

- Client Side Rendering
If we want to use a component on the client side we need to add "use client" statement at the top of the file.

If you put a console.log('Hello') in your component and if you see that logged on the terminal on the IDE, it means its a server component. If the log
happens on the browser console, then component is a client component.
If you want to add interactivity(click, change) then you need to use client components(ex Button component)
If the jsx doesn't require any interactivity then its better if its a server component(ex Footer)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Access to Dynamic Route pathName

If you want to access the path name of a dynamic route
In [category]/page.tsx file

export default function PortfolioCategory({
  params, ----------------------------------------------------------> get access to params
}: {
  params: { category: string }; ------------------------------------> add the params type based on the folder name
}) {
  return (
    <main className="h-full">
      <h1 className="text-4xl font-light">Portfolio Category Page</h1>
      <h2 className="text-2xl font-light capitalize">{params.category}</h2> -----------> use the category name in JSX
    </main>
  );
}

----------------------------------------------------------------------------------------------------------------------------------------------------------
Data Fetching in NextJS 13

- on client side
  - fetch/axios in useEffect
  - use a library like react-query, swr

- on server side
  convert the server component into a async component and use the fetch api to get data.

  async function getData() {
      const res = await fetch('https://api.example.com/posts', {
          cache: 'force-cache', -----------> cache your response
          next: {revalidate: 10} ----------> revalidate the response every 10s
      });
      return res.json();
  }

  const Page = async () => {
      const data = await getData();

      return <main></main>
  }

----------------------------------------------------------------------------------------------------------------------------------------------------
NextJS API

In the app directory create an api folder
In the api folder we can create as many folders which will act as the api routes.
Lets say we create a posts folder inside the api folder
Inside the posts folder create a file named route.ts(the name route is mandatory)
Now if you visit url/api/posts you will be hitting this api endpoint.

In the route.js file

import { NextResponse } from "next/server";
export const GET = async (req) => {
    // get your data from db

    return new NextResponse('It works!', {status: 200})
}

