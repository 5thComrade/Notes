What is Github Actions?
It is a Workflow automation service offered by GitHub. Automate all kinds of repository-related processes and actions.
GitHub Actions works well with CI/CD.
Continuous Integration(CI): code changes are automatically built, tested and merged with existing code.
Continuous Delivery(CD): After integration, new app or package versions are published automatically.
Github Actions can also help in code & repository management.

A Github repository can have
1: Workflows: A repo can have as many workflows it wants. Workflows are triggered upon events.
2: Jobs: A workflow can have one or more jobs. A job defines a Runner(execution environment). Jobs can run in parallel(default) or sequential.
3: Steps: A job can then have one or more steps. Execute a shell script or an action.

The First Workflow

```yml
name: First Workflow         ------------- name of the workflow

on: workflow_dispatch        ------------- trigger this workflow manually

jobs:
  some-job-name:             -------------- The name of the job
    runs-on: ubuntu-latest   -------------- Run this job on the latest ubantu github actions runner image
    steps:
      - name: print greeting 
        run: echo "Hello World!" ---------- single line shell command. use pipe symbol for multi-line shell commands 
      - name: print goodbye                                                       
        run: echo "Done - Bye!!"
```

To run multi-line shell commands

run: |
     echo "Name is Antony"
     echo "I am a software engineer"

-------------------------------------------------------------------------------------------------------------------------------------------
What is an action?

An application that performs a frequently repeated task.
You can build your own actions but you can also use official or community actions

```yml
name: Test React App

on: push

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3 -------------- this is an 3rd party action, which downloads the code from the current repo
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm run test
```

You can explore 3rd party actions on https://github.com/marketplace?type=actions

------------------------------------------------------------------------------------------------------------------------------------------
If your workflow has multiple jobs, all these jobs run parallel.
You may have a use case where you want to run maybe sequentially.

```yml
name: Test React App

on: push

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm run test
  deploy:
    needs: test -------------------------- this job will now wait for "test" job to complete, if you want to wait for multiple jobs use [job1, job2]
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Deploy
        run: echo "deploying..."
```

-----------------------------------------------------------------------------------------------------------------------------------------------------------
Multiple Triggers(Events)

```yml
name: Test React App

on: [push, workflow_dispatch] ----------- this is how we achieve multiple triggers

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm run test
```

------------------------------------------------------------------------------------------------------------------------------------------------------------
Expressions & Github Contexts

```yml
name: Output Github Context

on: workflow_dispatch

jobs:
  context:
    runs-on: ubuntu-latest
    steps:
      - name: Output Github Context
        run: echo "${{ toJSON(github) }}" ----------- toJSON is a github action expression function and github is a github action context
```

------------------------------------------------------------------------------------------------------------------------------------------------------------
