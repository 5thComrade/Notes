Axios Notes

DOCUMENTATION : https://axios-http.com/docs/intro

If you are using async await, ensure that your axios request is inside a try catch block.

1: GET Request

   const res = await axios({
      method: "get",
      url: "https://jsonplaceholder.typicode.com/posts",
      params: {
         _limit: 5,                                     -------> https://jsonplaceholder.typicode.com/posts?_limit=5
      }
   });

   ---- OR ----

   const res = await axios.get('https://jsonplaceholder.typicode.com/posts', {params: {_limit: 5}});

   ---- OR ----

   const res = await axios.get('https://jsonplaceholder.typicode.com/posts?_limit=5');


2: POST Request

   const res = await axios({
       method: "post",
       url: "https://jsonplaceholder.typicode.com/posts",
       data: {
          title: "Antony",
          body: "Antony is cool",
       }
   })

   ---- OR ----
   
   const data = {title: "Antony", body: "Antony is cool"}
   const res = await axios.post('https://jsonplaceholder.typicode.com/posts', data);

3: PUT/PATCH Request
   PUT and PATCH are used to update data.
   The key difference is PUT request completely replaces the data with the data we send and 
   PATCH request keeps the old data as it is but only updates what we send in the request

   Example: original OriginalData = {name: "Antony", age: 24}

   PUT updateData = {Job: "Teamlease", dob: 27071996}
       The updated data will not have name and age, it will completely replaced with updateData.

   PATCH updateData = {Job: "Teamlease", age: 25}
         The updated data will be {name: "Antony", age: 25, Job: "Teamlease"}

   Notice with PATCH request age was updated to 25 and Job property was added

   await axios.patch(
      "https://jsonplaceholder.typicode.com/posts/2",
      {
        Job: "Teamlease",
        age: 25,
      }
    );

4: Simultanious Requests to multiple API's

   await axios.all([
      axios.get("https://jsonplaceholder.typicode.com/posts"),
      axios.get("https://jsonplaceholder.typicode.com/todos"),
    ]);

5: INTERCEPTING REQUESTS AND RESPONSES
   
   axios.interceptors.request.use(
    (config) => {
    console.log(
      `${config.method.toUpperCase()} request sent to ${
        config.url
      } at ${new Date().getTime()}`
     );
     return config;
    },
    (error) => Promise.reject(error)
   );

6: CUSTOM HEADERS
   
   Let's say you want to send an Authorization header along with your request

   const config = {
      headers: {
	'Content-Type': "application/json",
        Authorization: "sometoken"
     }
   }
   const data = {title: "Antony", body: "Antony is cool"}
   const res = await axios.post('https://jsonplaceholder.typicode.com/posts', data, config);

7: AXIOS GLOBALS
   
    What if you have a bunch of protected api routes what need Authorization header with some token.
    Axios Globals allow you to set global configs to be sent with all the requests.
   
    axios.defaults.headers.common["X-Auth-Token"] = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ";

8: Error Handling

   Error object has a few useful methods
    
   catch(err) {
     if(err.response) {
        //This means the server responded with a status other than 200 range
        console.log(err.response.status);
        console.log(err.response.headers);
        console.log(err.response.data);
     } else if(err.request) {
       //This means request was made but no response
       console.log(err.request);
     } else {
       console.log(err.message);
     }
   }

9: AXIOS INSTANCES

   const axiosInstance = axios.create({
      baseURL: "https://jsonplaceholder.typicode.com",
      headers: {
        Authorization: "antonytoken",
      },
      params: {
        _limit: 5,
      },
   });

  You can then use various instances to make requests to authenticated routes and non-authenticated routes

