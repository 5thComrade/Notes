Binary to Decimal Conversion

13 => 0   0   0   0   1   1   0   1 -------Decimal
     128  64  32  16  8   4   2   1 -------weight of binary digits

     8 + 4 + 1 = 13

=====================================================================================================================================================
Function Expression
 const square = function(x) {
 	return x*x;
 }

The set of bindings(variables) visible inside a block is determined by the place of that block in the program text. 
Each local scope can also see all the local scopes that contain it, and all scopes can see the global scope. 
This approach to binding visibility is called lexical scoping.

Function Declaration
 function square(x) {
 	return x*x;
 }

The difference between function declaration and function expression is hoisting.
Functions defined using function declaration can be called even before it is defined because they are moved to the top of their scope(hoisting), 
whereas function defined using function expression can be called after the function is defined.

Arrow Functions
const square = x => x*x;

Call Stack

line 1 ----> const greet = function(name) {
line 2 ---->   console.log(`Hello ${name}`);
line 3 ----> }
line 4 ----> greet('Antony');

How this function works?
The execution reaches line 4, the greet function is called, the execution jumps to line 1, then jumps to line 2, the console.log gets executed 
and returns its value, then execution returns to line 2, it understood the function is done and jumps to line 4 place from where it was called 
and continues from there.
In order to all that jumping, the computer should remember the context from which the call happened.
The place where the computer stores this context is the call stack.
Every time a function is called, the current context is stored on top of this stack. When a function returns, it removes the top context 
from the stack and uses that context to continue execution.

Closures
A function that returns another function, also wraps the lexcial scope with it. This is called a closures.

const wrapValue = function(n) {
  let local = n;
  return () => local;
}

const wrap1 = wrapValue(1);
const wrap2 = wrapValue(2);
console.log(wrap1()); //1
console.log(wrap2()); //2

The n for both the function calls is different, but that does not confuse the inner returned funcion, because it always returns 
the n from its lexical scope.
Think of function values as containing both the code in their body and the environment in which they are created. 
When called, the function body sees the environment in which it was created, not the environment in which it is called.

Recursion
A function that calls itself is called a recursive function.

==========================================================================================================================================================
Data Structures: Objects and Arrays

Values of type Object is a collection of properties.

let anObject = {
   left: 1,
   right: 2,
}

console.log(anObject.left); //1
delete anObject.left;
console.log(anObject.left); //undefined
console.log("left" in anObject); //false
console.log(Object.keys(anObject)); //["left", "right"]


Mutability of Objects

let a = 10;
let b = 10;
console.log(a === b); //true [immutable]

let c = {
  value: 10,
}

let d = {
  value: 10,
}

console.log(c === d); //false 

