1: When "use strict"; is located at the top of a script, the whole script works the mordern way.

2: If you are in Chrome Developer Console and you have a multi-line program to execute, Shift + Enter will take you to the next line.

3: JavaScript is case sensitive, apple and AppLe are two different variables.

4: There are 8 data types in JavaScript - Number, BigInt, String, Boolean, "null" value, "undefined" value, object, typeof operator

5: Number data type - Number values, floating point numbers, Infinity, -Infinity and NaN

6: String(value)---> return the string form of value
   Number(value)---> return the number form of value
   Number(true) ---> return 1
   Number(null) ---> return 0
   Number(false)---> return 0
   Boolean(value) --> returns either true or false
                      falsey values - 0, "", null, undefined, NaN
                      everything else is truthy

7: Exponentiation **
   2 ** 3 //8

8: In string concatenation using binary +
   If any one of the operand is a string the output will be a sting
   1 + "2" //"12"
   "2" + 1 //"21"
   The other arithmitic operators work only with numbers and converts its operands to numbers if necessary
   6 - "1" //5
   "8"/"4" //2

9: Number(value) is the same as +value

10: The logical OR operator ||
    Evaluates operands from left to right
    For each operand, converts it to boolean. If the result is true, stops and returns the original value of that operand.
    If all operands have been evaluated (i.e. all were false), returns the last operand.
    alert(null || 1 || 0) //Output 1
    alert(null || undefined || 0) //Output 0 last value because everything is falsy

11: The logical AND operator &&
    Evaluates operands from left to right.
    For each operand, converts it to a boolean. If the result is false, stops and returns the original value of that operand.
    If all operands have been evaluated (i.e. all were truthy), returns the last operand.
    return (loading && <Loading />) //if loading is true the Loading component is returned

12: Generating an array of arrays
    Array.from({length: 5}); ------> [undefined, undefined, undefined, undefined, undefined]
    Array.from({length: 5}, (_, index) => index); -------> [0, 1, 2, 3, 4]
    Array.from({length: 5}, (_, index) => somearray.slice(index, index + 10)); -----> [[10 values], [10 values], [10 values]....]

13: Destructuring nested objects
    Example: 
    let obj = {
       urls: {
          full: 'something.com',
          regular: 'somethingelse.com'
       }
       alt: "this is some description",
    }
    
    {urls: {regular}, alt} = obj; ---------------->this is how you destructure nested objects, here we destructured urls and took only regular

14: :root {           --------------->this is the document html element
      --clr-bg: #fff;
    }

    How can we access the html element?
    document.documentElement will give you the html element
    Now we can access this html element and change the css variables by adding various classes to this html element

15: We can also pass functions as default parameters in a function
    const someFunction = (to, message=getMessage()) {
        console.log(to + message);
    }
   
    In the above case, getMessage() is called everytime message parameter is not passed, the value of getMessage() then becomes the value of message.

16: Array Map Method
    <array>.map((element, index) => {
       return <Component key={index} name={element.name} />
    })

    map method returns a new array with what gets returned from the callback function.

17: Do not mutate arrays and objects in JavaScript, use the spread operator
    const newArray = [...oldArray];
    const newObj = {...oldObj};

18: Adding new values to an array without mutating the old array
    const newArray = oldArray.concat('newValue');

    contact method returns a new array

19: Array Filter Method
    const newArray = oldArray.filter((oldValue, index) => {
       return oldValue.length < 7 ? oldValue : null;
    })
    
    The above code snippet generates a newArray with values of oldArray whose length is less than 7.
    The best part about this approach is, oldArray will remain as it is(state is not mutated).

20: Array Find Method
    const value = array.find((element) => {
	return element === "5";
    });
   
    If it finds an array element where the function returns a true value, find() returns the value of that array element 
    (and does not check the remaining values). Otherwise it returns undefined.

21: Array Methods
     
    arr.push(...items) ---> adds items to the end
    arr.pop() ---> extracts an item from the end
    arr.shift() ---> extracts an item from the beginning
    arr.unshift(...items) ---> adds items to the beginning

    arr.splice(start, deleteCount, ...newValues)
    arr.splice(0, 2) ---> start at index 0 and delete 2 items(start index included)
    arr.splice(1, 1, "Antony") ---> start at index 1, delete 1 item(that is index 1 item) and replace it with "Antony"
    arr.splice(0, 3, "Yolo", "Killer") ---> start at index 0, delete 3 items, replace those 3 items with "Yolo" and "Killer"
    let removedArray = arr.splice(0, 2) ---> splice method returns an array of the removed items
    arr.splice(2, 0, "Chiramel") ---> start at index 2, delete nothing, but add "Chiramel" right after index 2


    arr.slice(1, 3) ---> returns a new array copying to it all items from index start to end (not including end).
    arr.slice(-2) ---> returns a new array copying to it all the elements from -2 till the end of the array
                       -2 is the second last element in the array 

    arr.contact(item1, item2) --->  arr.concat creates a new array that includes values from other arrays and additional items.
                                    newArray = [...arr, item1, item2]
    arr.concat([3,4]) ---> newArray = [...arr, 3, 4]
    arr.concat([3,4], [5,6]) ---> newArray = [...arr, 3, 4, 5, 6]
    arr.concat([7,6], 3, 4) ---> newArray = [...arr, 7, 6, 3, 4]

    Iterate an array
    arr.forEach((item, index, array) => {
        alert(item);
    });
    
    If the callback function returns any value, it is discarded

    arr.indexOf(item) ---> returns the first index of the item if found else returns -1
    arr.lastIndexOf(item) ---> starts looking from right to left
    arr.includes(item) ---> returns true if the array has item else false

    arr.find((item, index, array) => {
       return (item.id === 1)
    });
    If the callback function returns true, the function is stopped and the item is returned.
    If nothing is found, undefined is returned.

    arr.filter((item, index, array) => {
       return item.id < 3;
    })
    filter method returns an array of matching elements.

    arr.map((item, index, array) => {
       return item * 2;
    })
    
    The new array will be items that are multiplied by 2

    arr.reverse() ---> reverses the order of elements

    arr.sort()

    users.every((user) => {    ---------------> every() method checks if all elements in an array pass a test, if any one item is false every returns false
	return user.age > 18
    })

    arr.includes(item) -----> returns boolean value

    

22: async await slows your code
    if we have multiple awaits one after another, remember the code starts behaving like synchornous code
    the second asynchronous activity will wait until the first one is fulfilled.
    
    If we want to initaite all the async fetchs we need to use Promise.all() or Promise.allSettled([])
    const result = await Promise.allSettled([axios(url1), axios(url2)]);
    
===============================================================================================================================================================
JavaScript under the hood

23: A JavaScript Engine consists of two main components
	1: Memory Heap - this is where the memory allocation happens
	2: Call Stack - this is where your stack frames are as your code executes

    Link: https://medium.com/sessionstack-blog/how-does-javascript-actually-work-part-1-b0bacc073cf
	
24: There are various API's the browser or NodeJS runtime gives(ex: setTimeout, https.get). These API's, however, are not provided by the JS Engine
    A JS Runtime hence comprises of 
    JS Engine + API's(API's environment) + Callback/Task/Message/MacroTask Queue + Job/MicroTask Queue + Event loop
    
25: Javascript is a single-threaded programming language, which means it has a single Call Stack. Therefore it can do one thing at a time.
    Call Stack is a data structure which records basically where in the program we are.
    If we step into a function, we put it on the top of the stack. If we return from a function, we pop off the top of the stack. That's all the stack can do.
    Each entry in the call stack is called a Stack Frame.
 
26: Blowing the stack: this happens when you reach the maximum Call Stack size. The below recursive code will blow the stack.
    function foo() {
      foo();
    }
    
    foo();
    
27: How does Asynchronous JavaScript work?
    Let us look into a code example
    ---
    const networkRequest = () => {
       setTimeout(() => {
          console.log('Async code');
       }, 2000)
    }
    
    console.log('Hello World');
    networkRequest();
    console.log('The End');
    ---
    
    When the above code loads in the browser, the console.log('Hello World') is pushed to the stack and popped off the stack after its
    finished. Next, a call to networkRequest() is encountered, so its pushed to the top of the stack.
    Next setTimeout() function is called, so its pushed to the top of the stack. The setTimeout has two arguments, callback and time in milliseconds.
    The setTimeout() method starts a timer of 2s in the web APIs environment. At this point, the setTimeout() has finished and itâ€™s popped off from the stack.
    After it, console.log('The End') is pushed to the stack, executed and removed from the stack after its completion.
    Meanwhile, the timer has expired, now the callback is pushed to the callback queue. But the callback is not immediately executed, and thatâ€™s 
    where the event loop kicks in.
    The job of the Event loop is to look into the call stack and determine if the call stack is empty or not. 
    If the call stack is empty, it looks into the callback queue to see if thereâ€™s any pending callback waiting to be executed.
    
    Link: https://blog.bitsrc.io/understanding-asynchronous-javascript-the-event-loop-74cd408419ff
    
28: How Promises work in JavaScript? 
    Not all the tasks are created of the same priority. There are macrotasks and microtasks.
    Macrotasks are called Tasks, and MicroTasks are called Jobs. 
    Examples of macrotasks are setTimeout, setInterval, setImmediate, I/O tasks, etc.
    Examples of Microtasks are, Promises, processes.nextTick, etc.
    ES6 introduced the concept of job queue/micro-task queue which is used by Promises in JavaScript.
    The difference between the message queue and the job queue is that the job queue has a higher priority than the message queue,
    which means that promise jobs inside the job queue/ micro-task queue will be executed before the callbacks inside the message queue.
    Check the below code
    
    ---
    console.log('Script start');
    setTimeout(() => {
      console.log('setTimeout');
    }, 0);
    new Promise((resolve, reject) => {
       resolve('Promise resolved');
    }).then(res => console.log(res))
      .catch(err => console.log(err));
    console.log('Script End');
    ---
    
    Output
    ---
    Script start
    Script End
    Promise resolved
    setTimeout
    ---
    
    console.log('Script start') is pushed to the top of the call stack, it gets executed and popped out of the call stack.
    Next setTimeout is pushed to the call stack, setTimeout starts a timer and keeps the callback function in the web APIs environment. 
    setTimeout is now popped out of the call stack. Now we encounter a Promise, the callback to the promise is kept in the web APIs environment to get resolved/rejected.
    The Promise function is popped out of the call stack. Next console.log('Script End') is pushed to the top of the call stack and executed.
    Meanwhile, the setTimeout timer has expired, the callback is moved to the Task Queue and the Promise has also be resolved, the Promise callback is now oved to 
    the Job Queue. The event loop will first look at the Job Queue, it sees the Promise callback and moves it to the call stack, executes it and then looks into the Task
    Queue and the moves the setTimeout callback into the call stack.
    
    Link: https://blog.greenroots.info/task-queue-and-job-queue-deep-dive-into-javascript-event-loop-model
    Link: https://blog.bitsrc.io/understanding-asynchronous-javascript-the-event-loop-74cd408419ff

29: V8 behind the scenes
	- Parsing the code
		During the parsing phase, the code is broken down into its respective tokens.
		const sum = 5 + 7
		Here const is a token, sum is a token, 5 is a token, â€˜+â€™ is a token, and 7 is a token. 
		After the code is broken down into tokens, it is given to the syntax parser which converts 
		the code into an Abstract Syntax Tree (AST).
		
	- Compiling the code
		Compilation is the process of converting human-readable code to machine code. 
		There are two ways to compile the code: 
			- Using an Interpreter: The interpreter scans the code line by line and converts it into byte code. Example: Python
			- Using a Compiler: The Compiler scans the entire document and compiles it into highly optimized byte code. Example: Java
			
		Unlike other languages, The V8 engine uses both a compiler and an interpreter and follows Just in Time(JIT) 
		Compilation for improved performance. 
		Just in Time(JIT) Compilation: The V8 engine initially uses an interpreter, to interpret the code. 
		On further executions, the V8 engine finds patterns such as frequently executed functions, 
		frequently used variables, and compiles them to improve performance.
		The V8 engine uses the Ignition interpreter, which takes in the Abstract Syntax Tree as the input and gives the byte code as the output,
		which further proceeds to the execution phase. When the code is being interpreted, the compiler tries to talk with the 
		interpreter to optimize the code. The V8 engine uses the Turbofan compiler, which takes the byte code from the interpreter 
		and feedback(from the interpreter) as the input and gives the optimized machine code as the output.
		
	- Executing the code
		The byte code is executed by using the Memory heap and the Call Stack of the V8 engineâ€™s runtime environment. 
		Memory Heap is the place where all the variables and functions are assigned memory. Call Stack is the place 
		where each individual functions, when called are pushed to the stack, and popped out after their execution.
----------------------------------------------------------------------------------------------------------------------------------------------------------------	
29: What is the new keyword in JavaScript?
    The new operator lets developers create an instance of a user-defined object type or one of the built-in object types that has a constructor function.
    That is, new can we used with constructor functions to create new instances of an object.
    
    function Car(make, model, year) {
    	this.make = make;
	this.model = model;
	this.year = year;
    }
    const car1 = new Car('Ford', 'Mustang', 1969);
    console.log(car1.make); // expected output: 'Ford'
    
    When a function is called with the new keyword, the function will be used as a constructor.
    new will do the following things
    1: Creates a blank, plain JavaScript object. For convenience, lets call it newInstance
    2: Executes the constructor function with the given arguments, binding newInstance as the this context (i.e. all references to this in the 
       constructor function now refer to newInstance).
    Here's the cool thing about new - when you invoke a function using the new keyword, a new object is created and returned ("under the hood") 
    and the object that is created is called this.
   
    Let's see how things work without the new keyword
    Remember every function in JavaScript as a prototype property that references an object.
   
    function doThing {}
    console.log(doThing.prototype); // {} ----> the prototype property is an empty object
   
    Another important thing to remember before we move forward is Object.create
    
    let child = Object.create(parent);
    
    In the above case, we created a child object from the parent object. If we fail to lookup for a property in the child, JavaScript
    will delegate the lookup on the parent object.
    
    Now lets see how life was before the new keyword
    
    function Animal(name) {
    	let animal = Object.create(Animal.prototype); // created a child object from the Animal.prototype parent object
	animal.name = name; // assigning name property to the newly created child object
	
	return animal; // returning the newly created child object
    }
    
    Animal.prototype.eat = function() { // creating a new eat method directly on the Animal.prototype object(ie parent object)
    	console.log(`${this.name} is eating`); // this refers to the newly created child object
    }
    
    const leo = Animal('leo');
    leo.eat() // will first look at the newly created obj then it will look in the parent obj(Animal.prototype) where it will find this method.
    
    Now lets see how new helps us
    The new keyword will create a new child object from the parent prototype and return it all under the hood.
    I will be using comments in the code to show what happens under the hood.
    
    function Animal(name){
    	// const this = Object.create(Animal.prototype); ---> happens under the hood
	
	this.name = name;
	
	// return this; ----> happens under the hood
    }
    
    Animal.prototype.eat = function() {
    	console.log(`${this.name} is eating`);
    }
    
    const leo = new Animal('leo');
    
    ****
    Article: https://www.freecodecamp.org/news/a-beginners-guide-to-javascripts-prototype/
    ****
   
30: What is a constuctor function?
    A constructor is a special function that creates and initializes an object. The purpose of a constructor is to create a new object and
    set values for any existing object properties.
    
31: What are Prototypes and Prototype Inheritance?
    Have you ever wondered how strings, arrays or objects 'know' the methods each of them have? How does a string know it can .toUpperCase() or
    an array know that it can .sort()? We never defined these methods manually.
    The answer is that these methods come built-in within each type of data structure thanks to something called prototype inheritance.
    In JavaScript, objects can inherit properties from other objects â€” the prototypes.
    
    Why do we need prototypes?
    Well lets say for every new array we create, we need to manually add .sort(), .map(), .filter() methods.
    This would mean all arrays will take a lot of memory and it would affect the performance.
    What is there was a way where we can define all the methods and properties in a separate object and they point every array to reference that object.
    This is why we need prototypes, we create a common object and then ask every new object we create to inherit the properties and methods from that, 
    helping us to avoid repetition.
    
    When we try to access a property of an object, the property is not only searched in the object itself. It's also searched in the 
    prototype of the object, in the prototype of the prototype, and so on â€“ until a property is found that matches the name or the end of
    the prototype chain is reached.
    If the property or method isnâ€™t found anywhere in the prototype chain, only then will JavaScript return undefined.
    
    Every object in JavaScript has an internal property called [[Prototype]].
    If we create an array and log it to the console we will see the [[Prototype]] property.
    The double square brackets that enclose [[Prototype]] signify that it is an internal property, and cannot be accessed directly in code.
    To find the [[Prototype]] of an object, we will use the Object.getPrototypeOf() method.
    
    const arr = [1,2,3]
    console.log(Object.getPrototypeOf(arr))
    
    At the end of the prototype chain is Object.prototype. All objects inherit the properties and methods of Object. Any attempt to search 
    beyond the end of the chain results in null.
    
    But under the hood and going up the ladder of the prototype chain, everything in JavaScript is built upon the Object.prototype.
    
    ***
    Article: https://www.freecodecamp.org/news/prototypes-and-inheritance-in-javascript/
    ***
    
32: How can I use constructor functions and prototype together?
    Lets see a coding example
    
    function Alien(name, phrase) {
    	this.name = name;
	this.phrase = phrase;
    }
    
    Alien.prototype.fly = () => console.log('flyinggggg!!!');
    
    const alien1 = new Alien('Antony', 'I am Batman');
    
    console.log(alien1.name); // output 'Antony'
    alien1.fly() // output 'flyinggggg!!!'
    
33: What are classes in JavaScript?
    ****
    Article: https://dev.to/mustapha/a-deep-dive-into-es6-classes-2h52
    ****
    Lets see the Animal constructor function described in the new keyword section written using class
    
    class Animal {
    	constructor(name) {
	   this.name = name;
	}
	
	eat() {
	   console.log(`${this.name} is eating`);
	}
    }
    
    const leo = new Animal('leo');
    
    The above implementation using class is just syntatic sugar, behind the scenes we are doing what we did in the new keyword section.
    
    Lets deep dive into Classes in JavaScript
    
    - Class declaration
    
    class Point {
      constructor() {}
    }
    
    - Class expression
    
    let Point = class {
    	constructor() {}
    }
    
    - Constructor
    
    The constructor method is a special method for creating and initialising an object created with a class.
    There can only be one constructor in each class. A SyntaxError will be thrown if the class contains more than one occurrence of a constructor.
    
    - Properties
      - Instance properties
      	In the snippet below x and y are instance properties.
	
	class Point {
 	   constructor(a, b) {
	       this.x = a;
	       this.y = b;
	   }
	}
	
      - Fields
         Let's refactor the code above using fields
	 
	 class Point {
	    x = 0;
	    y = 0;
	    
	    constructor(a, b) {
	    	this.x = a;
		this.y = b;
	    }
	 }
	 
	 Note also that fields can be declared with or without a default value.
	
       - Private Fields
       	 To declare a private field all you have to do is prefix its name with #.
	 Trying to access a private field outside the scope of the class will result in a syntax error.
	 Note that instance properties can not be private, only fields can. So you can't create an instance property with the # prefix.
	 
	 class Point {
	    #x = 0;
	    #y = 0;
	    
	    constructor(a, b) {
	    	this.#x = a;
		this.#y = b;
	    }
	 }
	 
     - Methods
       - Public methods
         To declare a method we can use the ES6 shorter syntax for method definitions on objects:
	 
	 class Point {
	    #x = 0;
	    #y = 0;
	    
	    translate(a, b) {
	    	this.#x += a;
		this.#y += b;
	    }
	 }
	 
       - Private methods
         Like we did with private fields, we can use a # as a prefix of our private methods:
	 
	 class Point {
	    #x = 0;
	    #y = 0;
	    
	    // Private method
	    #setXY(x, y) {
	    	this.#x = x;
		this.#y = y;
	    }
	 }
	 
      - Getters and Setters
      	To implement getters and setters we use the get and set keyword.
	
	class Point {
  	   #x = 0;
  	   #y = 0;

  	   get position() {
    		return [this.#x, this.#y];
  	   }

  	   set position(newPosition) {
   		// newPosition is an array like [0, 0]
    		[this.#x, this.#y] = newPosition;
  	  }
	}
	
      - Static fields and methods
        Static methods and fields (of a class) can be defined using the static keyword. Static members (fields and methods) cannot be called through
	a class instance and must be called without instantiating the class.
	
	Lets create a static method that keeps track of the number of class instances that were invoked.
	
	class MyClass {
	   static count = 0;
	   
	   constructor() {
	      this.instanceId = ++MyClass.count;
	   }
	}
	
	let x = new MyClass();
	let y = new MyClass();
	
	console.log(MyClass.count); // 2
	console.log(x.instanceId); // 1
	console.log(y.instanceId); // 2
	
     - Inheritance
       In class declarations or class expressions, the extends keyword is used to create a class that is a child of another class (a subclass).
       The super keyword is used to access and call functions on an object's parent.
       If there is a constructor present in the subclass, it needs to first call super() before using this.
       
       class Vehicle {
  	  #numberOfPassengers = 0;

  	  constructor(nb) {
    		this.#numberOfPassengers = nb;
  	  }

  	  getNumberOfPassengers() {
    		return this.#numberOfPassengers;
  	  }
        }
	
	class Bike extends Vehicle {
  	  constructor() {
    	    	super(1);
  	  }
	}
	
	const bike = new Bike();
	
	bike.getNumberOfPassengers(); // 1
	
---------------------------------------------------------------------------------------------------------------------------------------------------
34: What is 'this' keyword and its binding rules?
    ****
    Article: https://www.freecodecamp.org/news/javascript-this-keyword-binding-rules/
    ****
    
    
