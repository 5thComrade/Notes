The Serverless Framework (https://serverless.com/)

Serverless Framework aims to ease the pain of creating, deploying, managing, and debugging lambda functions

- To install Serverless
npm i -g serverless

- To configure Serverless
serverless config credentials --provider aws --key <key> --secret <secret> --profile <profile>

- Download a serverless template
sls create --template aws-nodejs

- Get available templates
sls create --help

- Deploy serverless function to lambda
sls deploy --aws-profile <profile>

- If you modified only the function and not the entire stack
sls deploy function -f <func name> --aws-profile <profile>

- Invoking the function
   - directly from the aws lambda console
   - using serverless
      sls invoke -f <function name> --log --aws-profile <profile>
   
- Get all the logs of the function
sls logs -f <func name> --aws-profile <profile>

- Removing a function
sls remove --aws-profile <profile>

===================================================================================================================
YAML
YAML is a markup language
Key-value pairs
Supports arrays
Supports multi-line string

invoice: 12345
date: 12-2-2020
bill-to:
   name: Antony
   address: | Thrissur, Kerala        -------------------> this is how yaml supports multi-line string
              560030
product:
   - title: wifi                      -------------------> this is how yaml supports arrays
     quantity: 5GB
     price: 600
   - title: electricity
     quantity: 5500
     price: 4000
     
==================================================================================================================
AWS Functions & Serverless Framework Core Concepts

- Function (Lambda Function)
  An independent unit of deployment - code that can be deployed in the cloud
  Does a single job, its the best practice
 
- Events
  Anything that triggers an AWS Lambda function to execute
 
- Resources
  AWS infrastructure components which your Functions use
  Ex: AWS DynamoDB write, S3 Bucket upload
  
- Services
  The Frameworks unit organization
  Where you define your functions, the events that trigger them and the resources your functions use.
  A servicecan be described in YAML or JSON
  
=================================================================================================================
AWS Functions Timeout and Memory

One can deploy multiple functions to aws lambda by changing the configurations in the serverless.yml file.
Please take a look at the function below

functions:
  hello-short-timeout:
    handler: handler.hello
    timeout: 3
    memorySize: 128
    description: Short timeout function
  hello-long-timeout:
    handler: handler.hello
    timeout: 6
    memorySize: 256
    description: Long time out function
    
In the above yaml snippet, we are deploying 2 functions (hello-short-timeout and hello-long-timeout)
To each of these functions we are providing additional configurations like timeout, memorySize and description

- Inheriting Settings from Provider
If you add certain settings in the Provider, it gets inherited by all the functions defined inside functions,
unless the same settings are over written in the function config.
Example:
provider:
  name: aws
  runtime: nodejs12.x
  timeout: 4
  memorySize: 512
  
In the example above, timeout and memorySize is defined inside provider, hence these settings will be inherited by all
the functions defined in the functions block.

=========================================================================================================================
IAM Permissions for Lmabda Functions
In the serverless.yml file add an iam role and attach policies.
In the example below, severless framework will automatically create an iam role and attach the lambda:listFunctions action 
on all the lambda resources. This will ensure that our lambda function can now listFunctions.

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-south-1
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "lambda:ListFunctions"
          Resource:
            - "*"
            
==========================================================================================================================
Environment Variables

One can define environment variables in the provider or inside the function definition.
In the example below, we have defined environment variable MY_NAME in both the provider and the function.
If there were multiple functions without any env setup, these functions will take the env of the provider. However, if you want to
override the env in the provider, define the desired env in the function definition.

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-south-1
  environment:
    MY_NAME: "Antony"
    
functions:
  listLambdaFunctns:
    name: ListLambdaFunctions-${sls:stage}
    handler: handler.listFunctions
    timeout: 60
    memorySize: 256
    description: This lambda function lists all the lambda functions
    environment:
      MY_NAME: "Rohan"
=========================================================================================================================
