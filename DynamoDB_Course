Notes from DynamoDB Course

DynamoDB is a fast, flexible, cost effective, highly scalable, fault tolerant and secure, serverless cloud NoSQL database fully-managed by AWS.

DynamoDB Tables and Naming Conventions
prefix_tablename
ex: test_users, staging_users
---------------------------------------------------------------------------------------------------------------------------------------
Data types in DynamoDB
- Scalar types
  - Exactly one value
  - eg: string, number, binary, boolean, and null
  - keys or index attributes only support string, number and binary scalar types
- Set types
  - Multiple scalar values
  - eg: string set, number set and binary set
- Document types
  - Complex structure with nested attributes
  - eg: list and map
-----------------------------------------------------------------------------------------------------------------------------------------  
DynamoDB Consistency Model
  - Strong consistency
    The most up-to-date data
    Must be requested explicitly
    
  - Eventual Consistency
    May or may not reflect the latest copy of data
    Default consistency for all operations
    50% cheaper
------------------------------------------------------------------------------------------------------------------------------------------
DynamoDB Capacity Units
Tables in DynamoDB must be configured with the throughput capacity. 
  Allows for predictable performance at scale. 
  Used to control read/write throughput
  Supports auto-scaling
  Defined using RCUs and WCUs
  Major factor in DynamoDB pricing
  1 capacity unit = 1 request/sec
    RCUs
    1 RCU = 1 strongly consistent table read/sec
    1 RCU = 2 eventually consistent table read/sec
    In blocks of 4KB
    
    WCUs
    1 WCU = 1 table write/sec
    In blocks of 1KB
    
    Example
    RCUs to read 10KB of data per second with strong consistency = 10KB/4KB = 2.5 ~ 3 RCUs
    WCUs to write 10KB of data per second = 10KB/1KB = 10WCUs
    
    Scaling
    Scaling Up: As and when needed
    Scaling Down: Up to 4 times in a day
    1 partition supports up to 1000 WCUs or 3000 RCUs
    
    DynamoDB now supports On-Demand read/write capacity provisioning, instead of manually provisioning read/write capacity units
    let DynamoDB take care of that.
------------------------------------------------------------------------------------------------------------------------------------------
DynamoDB Partitions
A table can have multiple partitions. Its where DynamoDB stores table data.
This is managed internally by DynamoDB.
1 partition = 10GB of data
1 partition = 1000 WCUs or 3000 RCUs

Provisioned Capacity: 500 RCUs and 500 WCUs
Number of Partitions: P = (500 RCUs/3000 + 500 WCUs/1000) = 0.67 ~ 1 partition

Now lets say the size of this partition exceeds 10GB, DynamoDB will provision another partition for this DynamoDB table.
Even if we increase the provisioned capacity, DynamoDB will provision partitions accordingly.

New Capacity: 1000 RCUs and 1000 WCUs
Number of Partitions: P = (1000 RCUs/3000 + 1000 WCUs/1000) = 1.33 ~ 2 partitions

Now the old partition will equally distribute data to the new partitions and will also distribute the provisioned capacity equally among the
new partitions. Once the distribution is done the old partition will get de-allocated.
P1 - 500 RCUs and 500 WCUs
P2 - 500 RCUs and 500 WCUs

NOTE: Once you get 2 partitions, ets say we reduce the provisioned capacity thinking now the number of partitions
will go back to 1. But that is not the case, once a partition is allocated and if you want to scale down, that partition will not get de-allocated.
Hence we must be careful when we bump-up the capacity for short-term, cause we may end up with multiple partitions with lower capacity(since capacity is split
equally among the partitions).

-------------------------------------------------------------------------------------------------------------------------------------------------------------
DynamoDB Indexes
Mandatory Primary Key - Either Simple or composite
Simple Primary Key - Only partition or hash key
Composite Primary Key - Partition Key + Sort or Range Key
Partition or Hash Key decides the target partition

--------------------------------------------------------------------------------------------------------------------------------------------------------------
Secondary Indexes
