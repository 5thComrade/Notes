Jest and React Testing Library

Jest
Jest is a javascript testing framework.
Jest is a test runner that finds tests, runs the tests, determines whether the tests passed or failed and reports it back in a human readable manner.

React Testing Library
RTL is a javascript utility that provides virtual DOM for testing react components.
React Testing Library provides a virtual DOM which we can use to interact with and verify the behavour of a react component.

Types of Tests
- Unit tests
  Focus is on testing the individual building blocks of an application such as a class or a function or a component.
  Each unit or building block is tested in isolation, independent of other units.
  Dependencis are mocked.
  
- Integration tests
  Focus is on testing a combination of units and ensuring they work together.
  Take longer than unit tests.
  
- E2E tests
  Focus is on testing the entire application flow and ensuring it works as designed from start to finish.
  Involves in a real UI, a real backend database, real services etc
  Take the longest as they cover the most amount of code
  

To run a test using Jest, first create a test file <FileName>.test.js
In the file we use a method by Jest called 'test'
- test
  test accepts 3 parameters
  test(name, fn, timeout)
  The first argument is the test name used to identify the test
  The second argument is a function that contains the expectations to test
  The third argument is timeout which is optional argument for specifying how long to wait before aborting the test. The default timeout value is
  5 seconds.
 
- render
  render is a method from the react testing library.
  render(<App />)
  The above code will create a virtual dom and render the App component.
  
- screen
  screen is a object from the react testing library
  render(<App />);
  const linkElement = screen.getByText('Learn React');
  
  The above code will render the App component on the virtual dom and use the screen object method 'getByText' to query the virtual dom for the link element
  
- expect
  expect is also a method from Jest library.
  We use expect to check our expectations from the test.
  expect(linkElement).toBeInTheDocument();
  

A simple test file would look like below

import { render, screen } from "@testing-library/react";
import Greet from "./Greet.component";

test('Greet renders correctly', () => {
   render(<Greet />);
   const textElement = screen.getByText('Hello');
   expect(textElement).toBeInTheDocument();
})

------------------------------------------------------------------------------------------------------------------------------------------------------------------
Test Driven Development(TDD)

Test driven development is a software development process where you write tests before writing the software code.
1: Create tests that verify the functionality of a specific feature
2: Write software code that will run the tests successfully when re-executed
3: Refactor the code for optimization while ensuring the tests continue to pass

Jest Watch Mode
When we run 'npm run test' jest behind the scenes enter watch mode
Watch mode is an option that we can pass to Jest asking to watch files that have changed since the last commit and execute tests
related only to those changed files.
This is an optimization designed to make your tests run fast regardless of how many tests you have.

Filtering tests
After you run 'npm run test', you'll find a few options provided by jest to filter tests
1: press a to run all tests
2: press f to run only failed tests
3: press q to quit watch mode
4: press p to filter by a filename regex pattern
5: press t to filter by a test name regex pattern
6: press o to filter tests that have currently changed

you can also filter tests by adding the only or skip flag

test.only('Some test', () => {     ------------------> with the only flag, only this test will run
   expect('Something').toBeInTheDocument();
})

test.skip('Some test', () => {     ------------------> with the skip flag, this test will be skipped
   expect('Something').toBeInTheDocument();
})

-------------------------------------------------------------------------------------------------------------------------------------------------------------
Grouping tests

- describe
  describe(name, fn)
  The first argument is the group name
  The second argument is a function that contains the expectations to test
  The only and skip flags are available for describe blocks too
  
  describe('Grouping tests', () => {
     test('Test 1', () => {
        expect('Something').toBeInTheDocument();
     })
     
     test('Test 2', () => {
        expect('Something').toBeInTheDocument();
     })
  })
  

---------------------------------------------------------------------------------------------------------------------------------------------------------------
Code Coverage Report
To generate code coverage report follow the below steps
Add a new script to package.json file

"coverage": "npm run test --coverage --watchAll --collectCoverageFrom='src/components/**/*.{ts,tsx}' --collectCoverageFrom='!src/components/**/*.{types, stories, 
constants, test, spec}.{ts,tsx}'"

The above script is an extension to the already existing test script with the additional flags.
The collectCoverageFrom flag generates the report for the test files in the components folder.
You will also see collectCoverageFrom flag used to ignore certain files.

---------------------------------------------------------------------------------------------------------------------------------------------------------------
Assertions

when writing tests, we often need to check that values meet certain conditions
Assertions decide if a test passes or fails

- expect
  expect(value)
  The argument should be the value your code produces
  Typically, you will use expect along with a 'matcher' function to assert something about a value.
  A matcher can optionally accept an argument which is the correct expected value
  
  If you sturggle to find what matchers to use visit
  jest.io/docs/using-matchers
  
jest-dom is an additional plugin that offers matchers for dom manipulation

---------------------------------------------------------------------------------------------------------------------------------------------------------------
What to test in a React Project?

- Test component renders
- Test component renders with props
- Test component renders in different states
- Test component reacts to events

What not to test?

- Implementation details
- Third party code
- Code that is not important from a user point of view

----------------------------------------------------------------------------------------------------------------------------------------------------------------
React Testing Library Quries

Queries are the methods that Testing Library provides to find elements on the page.
To find a single element on the page, we have
- getBy...
- queryBy...
- findBy...

To find multiple elements on the page, we have
- getAllBy...
- queryAllBy...
- findAllBy...

The suffix can be one of Role, LabelText, PlaceHolderText, Text, DisplayValue, AltText, Title and finally TestId

- getByRole
  getByRole queries for elements with the given role.
  Role refers to the ARIA(Accessible Rich Internet Applications) role which provides semantic meaning to content to ensure people
  using assistive technologies are able to use them.
  By default, many semantic elements in HTML have a role
  Button element has a button role, anchor element has a link role, h1 to h6 elements have a heading role and so on
  If you are working with elements that do not have a default role or if you want to specify a different role, the role attribute can be used to
  add the desired role.
  To use an anchor element as a button in the navbar, you can add role='button'
  
  test('component renders correctly', () => {
     render(<Login />);
     const nameElement = screen.getByRole('textbox'); ---------> an input element in the jsx
     expect(nameElement).toBeInTheDocument();
     
     const termsElement = screen.getByRole('checkbox'); ----------> a checkbox element in the jsx
     expect(termsElement).toBeInTheDocument();
     
     const submitButtonElement = screen.getByRole('button'); ----------> a button element in the jsx
     expect(submitButtonElement).toBeInTheDocument();
  })
  
  getByRole takes a second parameter for options
  If you have multiple textbox elements in your dom, the test will fail
  This is where we can use the options object to specificially pick the right element
  
  const nameElement = screen.getByRole('textbox', {
     name: 'Name', ---------------------------------------> Input with this label <label htmlFor="name">Name</label>
  });
  
  const pageHeading = screen.getByRole('heading', {
     level: 1, --------------------------------------------> <h1>Page Heading</h1>
  })
  
  The name property will take the accessible name 
  1: the label of a form element
  2: the text content of a button
  3: the value of the aria-label attribute
  
  If your page has both h1 and h2 tags, getByRole will throw an error cause both have the role "heading",
  this is when we pass the level property to the options object to get the right heading
  There are more options available for the getByRole method
  
- getByLabelText
  getByLabelText will search for the label that matches the given text, then find the element associated with that label.

  const nameElement = screen.getByLabelText('Name') ----------- Input with this label <label htmlFor="name">Name</label>

  If you have multiple elements with the Name label then pass the selector option to getByLabelText
  const nameElement = screen.getByLabelText('Name', {
    selector: 'input'
  })

- getByPlaceholderText
  getByPlaceholderText will search for all elements with a placeholder attribute and find one that matches the given text.
  const nameElement = screen.getByPlaceholderText('First Name') --------- <input type='text' value={name} placeHolder='First Name' />

- getByText
  getByText will search for all elements that have a text node with textContent matching the given text.
  Typically, you'd use this to find paragraphs, div or span elements.

  const paraElement = screen.getByText('My Name is Antony!') ---------- <p>My Name is Antony!</p>

- getByDisplayValue
  getByDisplayValue returns the input, textarea, or select element that has the matching display value.

  const inputElement = screen.getByDisplayValue('Antony Chiramel') ------- <input type="text" value="Antony Chiramel" />

- getByAltText
  getByAltText will return the element that has the given alt text.
  This method only supports elements which accept an alt attribute like <img>, <input>, <area> or custom HTML elements

  const imgElement = screen.getByAltText('a person with laptop') ------ <img src="https://image.com/" alt="a person with laptop">

- getByTitle
  getByTitle returns the element that has the matching title attribute

  const closeIcon = screen.getByTitle('close') ------ <span title="close">X</span>

- getByTestId
  getByTestId returns the element that has the matching data-testid attribute

  const element =screen.getByTestId('custom-element') ------ <div data-testid="custom-element">Some Custom Element</div>


Priority order for queries(when to choose which query)
"Your test should resemble how users interact with your code as much as possible"
1: getByRole ----- this should be your first choice
2: getByLabelText
3: getByPlaceholderText
4: getByText
5: getByDisplayValue
6: getByAltText
7: getByTitle
8: getByTestId ----- your last choice if above don't work
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Query Multiple Elements

- getAllBy...
  getAllBy returns an array of all matching nodes for a query, and throws an error if no elements match
  Every getBy query has a corresponding getAllBy query, getAllByRole, getAllByLabelText etc

  const listItems = screen.getAllByRole('listitem')
  expect(listItems).toHaveLength(skills.length) --------- list items will be listItems array

----------------------------------------------------------------------------------------------------------------------------------------------------------------
TextMatch

The first property of every query we have used so far may look like a string
screen.getByRole('list') ---------- 'list' is not of type String, its of type TextMatch

TextMatch can be a string, regex or even a function
screen.getByText("Hello World") ----- <div>Hello World</div>
screen.getByText(/^hello world$/i) ----- <div>Hello World</div>

TextMatch - custom function
(content?: string, element?: Element | null) => boolean

screen.getByText((content) => content.startsWith('Hello')) ----- <div>Hello World</div>

----------------------------------------------------------------------------------------------------------------------------------------------------------------
queryBy... and queryAllBy...
How to check if something is not rendered on the screen? 

test('Renders login button', () => {
  render(<Skills skills={skills} />);
  const loginButton = screen.getByRole('button', {
    name: 'Login'
  })
  expect(loginButton).toBeInTheDocument()
})

test('Start learing button is not rendered', () => {
  render(<Skills skills={skills} />);
  const startLearningButton = screen.getByRole('button', {
    name: 'Start learning'
  })
  expect(startLearningButton).not.toBeInTheDocument() --------- will throw an error cause getByRole will not be able to find this element
})

queryBy returns the matching node for a query and return null(not throw an error) if no elements match
useful for asserting an element that is not present
throws an error if more than one match is found

queryAllBy returns an array of all matching nodes for a query and return an empty array if no elements match

test('Start learing button is not rendered', () => {
  render(<Skills skills={skills} />);
  const startLearningButton = screen.queryByRole('button', { -----------replace getByRole with queryByRole
    name: 'Start learning'
  })
  expect(startLearningButton).not.toBeInTheDocument()
})

------------------------------------------------------------------------------------------------------------------------------------------------------------
findBy... and findAllBy...
What if elements are not present in the DOM to begin but make their way into the DOM after some time?
For example, data that is fetched from a server will be rendered only after a few milliseconds

test('Start learning button is eventually displayed', () => {
    render(<Skills skills={data} />);
    const startLearningButton = screen.getByRole('button', {
        name: 'Start learning'
    })
    expect(startLearningButton).toBeInTheDocument(); ------------- will throw an error cause this button appears after login
})

findBy returns a Promise which resolves when a element is found which matches the given query. The promise is rejected if no element is found
or if more than one element is found after a default timeout of 1000ms.

findAllBy returns a promise which resolves to an array of elements when any elements are found which match the given query. The promise is rejected
if no elements are found after a default timeout of 1000ms.

test('Start learning button is eventually displayed', async () => {
    render(<Skills skills={data} />);
    const startLearningButton = await screen.findByRole('button', { ----------replaced getByRole with findByRole
        name: 'Start learning'
    }, {
        timeout: 2000, ---------------- override the default timeout
    })
    expect(startLearningButton).toBeInTheDocument();
})

------------------------------------------------------------------------------------------------------------------------------------------------------
Debugging

screen.debug() ---- will show the DOM tree nodes on the console for easy debugging

const view = render(<Skills skills={data} />);
logRoles(view.container) ---------- will log the roles of elements of the dom in the console

------------------------------------------------------------------------------------------------------------------------------------------------------
Testing Playground

Testing Playground is a Chrome extension that allows users to select the right queries for testing.

------------------------------------------------------------------------------------------------------------------------------------------------------
User Interactions

user-event 
A companion library for Testing Library that simulates user interactions by dispatching the events that would happen if the interaction took place in a browser.

fireEvent vs user-event
fireEvent is a method from RTL which is used to dispatch DOM events
user-event simulates full interactions, which may fire multiple events and do additional check along the way.
For example, we can dispatch the change event on an input field using fireEvent.
user-event allows you to describe a user interaction instead of a concrete event. It adds visibility and interactability checks along the way and
manipulates the DOM just like a user interaction in the browser would.

------------------------------------------------------------------------------------------------------------------------------------------------------
Pointer Interactions

import {render, screen} from "@testing-library/react";
import user from "@testing-library/user-event";
import Counter from "./Counter";

describe('Counter component', () => {
  test('renders a count of 1 after click', async () => {
    user.setup(),
    render(<Counter />);
    const incrementBtn = screen.getByRole('button', {
      name: 'Increment'
    })

    await user.click(incrementBtn)
    const countElement = screen.getByRole('heading')
    expect(countElement).toHaveTextContent('1')
  })
})


Convenience APIs to check pointer interactions
click()
dblClick()
tripleClick()
hover()
unhover()

Pointer APIs
pointer({keys: '[MouseLeft]'}) -------- left click is simulated
pointer({keys: '[MouseLeft][MouseRight]'}) -------- simulates a left click followed by a right click
-----------------------------------------------------------------------------------------------------------------------------------------------------
Keyboard Interactions

user.setup()
render(<Component />)
const nameInputElement = screen.getByRole('text')
await user.type(nameInputElement, 'Antony') ---------- simulate a user typing Antony into an input field
expect(nameInputElement).toHaveValue('Antony')

await user.tab() --------------- simulate the user clicked the tab button
expect(someButton).toHaveFocus()

utility apis for keyboard interactions
type()
clear()
selectOptions()
deselectOptions()
upload()

convenience apis
tab()

clipboard apis
copy()
cut()
paste()

keyboard apis
keyboard('foo') ----- simulates the user pressing f first, o next and o again

---------------------------------------------------------------------------------------------------------------------------------------------------
Providers
How to test components wrapped in a Provider Component

import {render, screen} from "@testing-library/react";
import Component from "./somewhere"; ------------ this component is not wrapped in the provider but its parent is(1)

describe('test provider', () => {
  test('renders test correctly', () => {
    render (<Component />, {
        wrapper: AppProvider ----------------------- now the test will not fail cause we are adding the wrapper(3)
    })
    const headingEle = screen.getByRole('heading')
    expect(headingEle).toHaveTextContent('dark mode') ------------- test fails, since thie component is not wrapped in provider(2)
  })
})

----------------------------------------------------------------------------------------------------------------------------------------------------
Custom React Hook

import { renderHook, act } from "@testing-library/react";
import useCunter from "./useCounter";

describe('test custom hook', () => {
    test('initial count of 0', () => {
        const { result } = renderHook(useCunter)
        expect(result.current.count).toBe(0)
    })

    test('increment the counter by 1', () => {
        const { result } = renderHook(useCunter)
        act(() => {                      --------------------------- use act when you make state updates
            result.current.increment()
        })
        expect(result.current.count).toBe(1)
    })
})

--------------------------------------------------------------------------------------------------------------------------------------------------
Mocking Functions

Lets say you have a component that accepts props. Two of the props are functions.
How will you test this component?

import {render, screen} from "@testing-library/react";
import Counter from "./somewhere"; ------------ this component accepts 3 props, one count prop and 2 optional props that are funcs
import user from "@@testing-library/user-event"

describe('Test Counter', () => {
  test('handlers are called', async () => {
      user.setup()
      const incrementHandler = jest.fn(); ------------------ this is how one can mock functions in jest
      const incrementHandler = jest.fn();
      render(<Counter count={0} handleIncrement={incrementHandler} handleDecrement={incrementHandler} />)

      const incrementBtn = screen.getByRole('button', {name: 'Increment'})
      await user.click(incrementBtn)

      expect(incrementHandler).toHaveBeenCalledTimes(1)
  })
})

-----------------------------------------------------------------------------------------------------------------------------------------------------
Mock HTTP Requests

We will use another package to mock http requests
This package is called Mock Service Worker(MSW)

In the src folder create a new folder called mocks
Create a new file in this newly created folder called server.ts

import { setupServer } from "msw/node"
import { handlers } from "./handlers"

export const server = setupSever(...handlers)


In the mocks folder create a new file called handlers.ts

import { rest } from "msw"

export const handlers = [
  rest.get('api url', (req, res, ctx) => {
      return res(ctx.status(200), ctx.json([
        {
          name: 'Antony'
        },
        {
          name: 'Rohan'
        },
        {
          name: 'Yogi'
        }
      ]))
  })
]

test('renders a list of users', async () => {
    render(<Users />)
    const users = await screen.findAllByRole('listitem')
    expect(users).toHaveLength(3)
})

To ask our tests to use our mock server, we need to update the src/setupTests.js file

How to mock an error?

test('renders error', () => {
    server.use(        ------------------------------------- per-test handler
        rest.get('api url', (req, res, ctx) => {
            return res(ctx.status(500))
        })
    )
    render(<Component />)
})

-------------------------------------------------------------------------------------------------------------------------------------------------
