Jest and React Testing Library

Jest
Jest is a javascript testing framework.
Jest is a test runner that finds tests, runs the tests, determines whether the tests passed or failed and reports it back in a human readable manner.

React Testing Library
RTL is a javascript utility that provides virtual DOM for testing react components.
React Testing Library provides a virtual DOM which we can use to interact with and verify the behavour of a react component.

Types of Tests
- Unit tests
  Focus is on testing the individual building blocks of an application such as a class or a function or a component.
  Each unit or building block is tested in isolation, independent of other units.
  Dependencis are mocked.
  
- Integration tests
  Focus is on testing a combination of units and ensuring they work together.
  Take longer than unit tests.
  
- E2E tests
  Focus is on testing the entire application flow and ensuring it works as designed from start to finish.
  Involves in a real UI, a real backend database, real services etc
  Take the longest as they cover the most amount of code
  

To run a test using Jest, first create a test file <FileName>.test.js
In the file we use a method by Jest called 'test'
- test
  test accepts 3 parameters
  test(name, fn, timeout)
  The first argument is the test name used to identify the test
  The second argument is a function that contains the expectations to test
  The third argument is timeout which is optional argument for specifying how long to wait before aborting the test. The default timeout value is
  5 seconds.
 
- render
  render is a method from the react testing library.
  render(<App />)
  The above code will create a virtual dom and render the App component.
  
- screen
  screen is a object from the react testing library
  render(<App />);
  const linkElement = screen.getByText('Learn React');
  
  The above code will render the App component on the virtual dom and use the screen object method 'getByText' to query the virtual dom for the link element
  
- expect
  expect is also a method from Jest library.
  We use expect to check our expectations from the test.
  expect(linkElement).toBeInTheDocument();
  

A simple test file would look like below

import { render, screen } from "@testing-library/react";
import Greet from "./Greet.component";

test('Greet renders correctly', () => {
   render(<Greet />);
   const textElement = screen.getByText('Hello');
   expect(textElement).toBeInTheDocument();
})

------------------------------------------------------------------------------------------------------------------------------------------------------------------
Test Driven Development(TDD)

Test driven development is a software development process where you write tests before writing the software code.
1: Create tests that verify the functionality of a specific feature
2: Write software code that will run the tests successfully when re-executed
3: Refactor the code for optimization while ensuring the tests continue to pass

Jest Watch Mode
When we run 'npm run test' jest behind the scenes enter watch mode
Watch mode is an option that we can pass to Jest asking to watch files that have changed since the last commit and execute tests
related only to those changed files.
This is an optimization designed to make your tests run fast regardless of how many tests you have.

Filtering tests
After you run 'npm run test', you'll find a few options provided by jest to filter tests
1: press a to run all tests
2: press f to run only failed tests
3: press q to quit watch mode
4: press p to filter by a filename regex pattern
5: press t to filter by a test name regex pattern
6: press o to filter tests that have currently changed

you can also filter tests by adding the only or skip flag

test.only('Some test', () => {     ------------------> with the only flag, only this test will run
   expect('Something').toBeInTheDocument();
})

test.skip('Some test', () => {     ------------------> with the skip flag, this test will be skipped
   expect('Something').toBeInTheDocument();
})

-------------------------------------------------------------------------------------------------------------------------------------------------------------
Grouping tests

- describe
  describe(name, fn)
  The first argument is the group name
  The second argument is a function that contains the expectations to test
  The only and skip flags are available for describe blocks too
  
  describe('Grouping tests', () => {
     test('Test 1', () => {
        expect('Something').toBeInTheDocument();
     })
     
     test('Test 2', () => {
        expect('Something').toBeInTheDocument();
     })
  })
  

---------------------------------------------------------------------------------------------------------------------------------------------------------------
Code Coverage Report
To generate code coverage report follow the below steps
Add a new script to package.json file

"coverage": "npm run test --coverage --watchAll --collectCoverageFrom='src/components/**/*.{ts,tsx}' --collectCoverageFrom='!src/components/**/*.{types, stories, 
constants, test, spec}.{ts,tsx}'"

The above script is an extension to the already existing test script with the additional flags.
The collectCoverageFrom flag generates the report for the test files in the components folder.
You will also see collectCoverageFrom flag used to ignore certain files.

---------------------------------------------------------------------------------------------------------------------------------------------------------------
Assertions

when writing tests, we often need to check that values meet certain conditions
Assertions decide if a test passes or fails

- expect
  expect(value)
  The argument should be the value your code produces
  Typically, you will use expect along with a 'matcher' function to assert something about a value.
  A matcher can optionally accept an argument which is the correct expected value
  
  If you sturggle to find what matchers to use visit
  jest.io/docs/using-matchers
  
jest-dom is an additional plugin that offers matchers for dom manipulation

---------------------------------------------------------------------------------------------------------------------------------------------------------------
What to test in a React Project?

- Test component renders
- Test component renders with props
- Test component renders in different states
- Test component reacts to events

What not to test?

- Implementation details
- Third party code
- Code that is not important from a user point of view

----------------------------------------------------------------------------------------------------------------------------------------------------------------
React Testing Library Quries

Queries are the methods that Testing Library provides to find elements on the page.
To find a single element on the page, we have
- getBy...
- queryBy...
- findBy...

To find multiple elements on the page, we have
- getAllBy...
- queryAllBy...
- findAllBy...

The suffix can be one of Role, LabelText, PlaceHolderText, Text, DisplayValue, AltText, Title and finally TestId

- getByRole
  getByRole queries for elements with the given role.
  Role refers to the ARIA(Accessible Rich Internet Applications) role which provides semantic meaning to content to ensure people
  using assistive technologies are able to use them.
  By default, many semantic elements in HTML have a role
  Button element has a button role, anchor element has a link role, h1 to h6 elements have a heading role and so on
  If you are working with elements that do not have a default role or if you want to specify a different role, the role attribute can be used to
  add the desired role.
  To use an anchor element as a button in the navbar, you can add role='button'
  
  test('component renders correctly', () => {
     render(<Login />);
     const nameElement = screen.getByRole('textbox'); ---------> an input element in the jsx
     expect(nameElement).toBeInTheDocument();
     
     const termsElement = screen.getByRole('checkbox'); ----------> a checkbox element in the jsx
     expect(termsElement).toBeInTheDocument();
     
     const submitButtonElement = screen.getByRole('button'); ----------> a button element in the jsx
     expect(submitButtonElement).toBeInTheDocument();
  })
  
  getByRole takes a second parameter for options
  If you have multiple textbox elements in your dom, the test will fail
  This is where we can use the options object to specificially pick the right element
  
  const nameElement = screen.getByRole('textbox', {
     name: 'Name', ---------------------------------------> <label htmlFor="name">Name</label>
  });
  
  const pageHeading = screen.getByRole('heading', {
     level: 1, --------------------------------------------> <h1>Page Heading</h1>
  })
  
  The name property will take the accessible name 
  1: the labe of a form element
  2: the text content of a button
  3: the value of the aria-label attribute
  
  If your page has both h1 and h2 tags, getByRole will throw an error cause both have the role "heading",
  this is when we pass the level property to the options object to get the right heading
  There are more options available for the getByRole method
  
- getByLabelText
  
