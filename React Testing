Jest and React Testing Library

Jest
Jest is a javascript testing framework.
Jest is a test runner that finds tests, runs the tests, determines whether the tests passed or failed and reports it back in a human readable manner.

React Testing Library
RTL is a javascript utility that provides virtual DOM for testing react components.
React Testing Library provides a virtual DOM which we can use to interact with and verify the behavour of a react component.

Types of Tests
- Unit tests
  Focus is on testing the individual building blocks of an application such as a class or a function or a component.
  Each unit or building block is tested in isolation, independent of other units.
  Dependencis are mocked.
  
- Integration tests
  Focus is on testing a combination of units and ensuring they work together.
  Take longer than unit tests.
  
- E2E tests
  Focus is on testing the entire application flow and ensuring it works as designed from start to finish.
  Involves in a real UI, a real backend database, real services etc
  Take the longest as they cover the most amount of code
  

To run a test using Jest, first create a test file <FileName>.test.js
In the file we use a method by Jest called 'test'
- test
  test accepts 3 parameters
  test(name, fn, timeout)
  The first argument is the test name used to identify the test
  The second argument is a function that contains the expectations to test
  The third argument is timeout which is optional argument for specifying how long to wait before aborting the test. The default timeout value is
  5 seconds.
 
- render
  render is a method from the react testing library.
  render(<App />)
  The above code will create a virtual dom and render the App component.
  
- screen
  screen is a object from the react testing library
  render(<App />);
  const linkElement = screen.getByText('Learn React');
  
  The above code will render the App component on the virtual dom and use the screen object method 'getByText' to query the virtual dom for the link element
  
- expect
  expect is also a method from Jest library.
  We use expect to check our expectations from the test.
  expect(linkElement).toBeInTheDocument();
  

A simple test file would look like below

import { render, screen } from "@testing-library/react";
import Greet from "./Greet.component";

test('Greet renders correctly', () => {
   render(<Greet />);
   const textElement = screen.getByText('Hello');
   expect(textElement).toBeInTheDocument();
})

------------------------------------------------------------------------------------------------------------------------------------------------------------------
Test Driven Development(TDD)

Test driven development is a software development process where you write tests before writing the software code.
1: Create tests that verify the functionality of a specific feature
2: Write software code that will run the tests successfully when re-executed
3: Refactor the code for optimization while ensuring the tests continue to pass

Jest Watch Mode
When we run 'npm run test' jest behind the scenes enter watch mode
Watch mode is an option that we can pass to Jest asking to watch files that have changed since the last commit and execute tests
related only to those changed files.
This is an optimization designed to make your tests run fast regardless of how many tests you have.

Filtering tests
After you run 'npm run test', you'll find a few options provided by jest to filter tests
1: press a to run all tests
2: press f to run only failed tests
3: press q to quit watch mode
4: press p to filter by a filename regex pattern
5: press t to filter by a test name regex pattern
6: press o to filter tests that have currently changed

you can also filter tests by adding the only or skip flag

test.only('Some test', () => {     ------------------> with the only flag, only this test will run
   expect('Something').toBeInTheDocument();
})

test.skip('Some test', () => {     ------------------> with the skip flag, this test will be skipped
   expect('Something').toBeInTheDocument();
})

-------------------------------------------------------------------------------------------------------------------------------------------------------------
Grouping tests

- describe
  describe(name, fn)
  The first argument is the group name
  The second argument is a function that contains the expectations to test
  The only and skip flags are available for describe blocks too
  
  describe('Grouping tests', () => {
     test('Test 1', () => {
        expect('Something').toBeInTheDocument();
     })
     
     test('Test 2', () => {
        expect('Something').toBeInTheDocument();
     })
  })
  
