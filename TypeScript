TypeScript

======================================================================================================================================
Generics
Lets write a funcion that takes an argument and returns the same argument.

function echo(arg) {
   return arg
}

Typescript will explicitely give the arg the any type, which is not what we want.
We may not know what types of arguments we may pass to the function, but we know for sure whatever the type of the argument is
the return value of the function should have the same type.
This is where generics help us.

function echo<Type>(arg: Type): Type {
  return arg
}

OR

const echo: <Type>(arg: Type) => Type = (arg) => {
   return arg
}

const a = echo<string>("a") ------> we explicitly set Type to be string
const a = echo("a") --------------> type argument inference, compiler infers the type automatically

So we are now telling the TypeScript Compiler that the argument and the return of the function will be the same type, indicated by the <Type> generic.

If we want to pass an array of some type as the argument our echo function will look like below.

function echo<Type>(arg: Type[]): Type[] {
   return arg;
}

=====================================================================================================================================
Ways to declare a function type

- 1st Method

type myFuncType = <Type>(arg: Type) => Type

const myFunc: myFuncType = (arg) => {
   return arg
}

myFunc<string>("Yolo")

- 2nd Method

function myFunc<Type>(arg: Type): Type {
   return arg
}

myFunc<string>("Yolo")

- 3rd Method

interface myFuncInterface {
   <Type>(arg: Type): Type
}

const myFunc: myFuncInterface = (arg) => {
   return arg
}

myFunc<string>("Yolo")

- 4th Method

interface myFuncInterface<Type> {
   (arg: Type): Type
}

const myFunc: myFuncInterface<number> = (arg) => {
   return arg
}

myFunc("Yolo")

=========================================================================================================================================
Typescript Course Notes

- Core Types
1: number
2: string
3: boolean

- Type Assignment
const x:string = "Antony"; ----> we are explicitly telling the ts compiler that x is of type string

- Type Inference
let x = 5; ----> here the type of x which is number is infered by the ts compiler
