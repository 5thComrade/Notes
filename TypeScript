TypeScript

======================================================================================================================================
Generics
Lets write a funcion that takes an argument and returns the same argument.

function echo(arg) {
   return arg
}

Typescript will explicitely give the arg the any type, which is not what we want.
We may not know what types of arguments we may pass to the function, but we know for sure whatever the type of the argument is
the return value of the function should have the same type.
This is where generics help us.

function echo<Type>(arg: Type): Type {
  return arg
}

OR

const echo: <Type>(arg: Type) => Type = (arg) => {
   return arg
}

const a = echo<string>("a") ------> we explicitly set Type to be string
const a = echo("a") --------------> type argument inference, compiler infers the type automatically

So we are now telling the TypeScript Compiler that the argument and the return of the function will be the same type, indicated by the <Type> generic.

If we want to pass an array of some type as the argument our echo function will look like below.

function echo<Type>(arg: Type[]): Type[] {
   return arg;
}

=====================================================================================================================================
Ways to declare a function type

- 1st Method

type myFuncType = <Type>(arg: Type) => Type

const myFunc: myFuncType = (arg) => {
   return arg
}

myFunc<string>("Yolo")

- 2nd Method

function myFunc<Type>(arg: Type): Type {
   return arg
}

myFunc<string>("Yolo")

- 3rd Method

interface myFuncInterface {
   <Type>(arg: Type): Type
}

const myFunc: myFuncInterface = (arg) => {
   return arg
}

myFunc<string>("Yolo")

- 4th Method

interface myFuncInterface<Type> {
   (arg: Type): Type
}

const myFunc: myFuncInterface<number> = (arg) => {
   return arg
}

myFunc("Yolo")

=========================================================================================================================================
Typescript Course Notes

const input = document.getElementById('firstName')!; -----------> here ts will not know if there is an element with id firstName
                                                                  however as a dev we know and hence we add the ! at the end.

- Core Types
1: number
2: string
3: boolean

- Type Assignment
const x:string = "Antony"; ----> we are explicitly telling the ts compiler that x is of type string

- Type Inference
let x = 5; ----> here the type of x which is number is infered by the ts compiler

- Core Types (continued)
4: object
   const person: object = { -------> object type is a generic type, we want to be more specific
     name: 'Antony',
     age: 26,
   }
   
   type PersonType = {  -----------> this is how we can be more specific about objects
     name: string;
     age: number;
   }
   
 5: Array
    type Hobbies = string[]; ---------> an array of strings
    let arr: (number | string)[]; ----> an array that may have numbers or string
    
 6: Tuple
    type Role = [number, string] ----> this is a tuple type, an array of fixed length and types of elements
    
 7: Enum
    enum Roles {ADMIN, CUSTOMER, AGENT}; -----> we can then use enums like Roles.ADMIN
    
 8: any
    any kind of value, no specific type assignment
    const something: any = 5;
    
======================================================================================================================================
Union types

const input: (string | number) = 'Antony';

======================================================================================================================================
Literal types

const func = (input: 'admin' | 'agent') => {} -------> the input parameter has the literal type assigned, it cannot be any string it
                                                       needs to be 'admin' or 'agent'
const number = 5; ------> here Typescript infers the type of number as 5 and not number
let number = 5; --------> here Typescript infers the type of number as number and not 5

=======================================================================================================================================
Type Aliases

type Inputs = number | string; ------> type aliasing

const input:Inputs = 56;

=======================================================================================================================================
Function return types

const func1(n: number) { ---> this function returns nothing, hence its return type is void
   console.log(n)
}

const func2(n: number) { ----> this function returns the parameter, hence its return type is number
   return n
}

const func3(n: number) { ----> this function returns undefined, hence its return type is undefined
   console.log(n)
   return;
}

=========================================================================================================================================
Function types

const add(n1: number, n2: number) {
   return n1 + n2;
}

let combineValues: Function; ----------> we are assigning the Function type to combineValues, this simply means any function can be stored in combineValues

combineValues = add;
combineValues = 5; ----------this line will now throw an error, cause 5 is not a function

console.log(combineValues(8, 8))

---------------
We want a more specific function type instead of the generic Function type
So for that we do as follows

let combineValues: (a: number, b: number) => number


combineValues = add;
combineValues = () => "Hello World"; -----> this line will throw an error, cause the function does not comply with the type definition

console.log(combineValues(8, 8))

=====================================================================================================================================================
unknown type

let userInput: unknown; -----> the unknown type works more like the any type, but less flexible compared to the any type

userInput = 5;
userInput = 'Antony';

====================================================================================================================================================
never type

function generateError(message: string, code: number): never { --------> never behaves like void, the function is intended to 'never' return anything
   throw {message: message, errorCode: code};
}

===================================================================================================================================================
TypeScript Compiler

- If you have one TypeScript file you can compile it using the following command

tsc app.ts

- If you want to make changes to that one file and the compiler should automatically compile it

tsc app.ts --watch

- If you have an entire project with multiple ts files, in the project folder run the following command

tsc init ----------> this command will create tsconfig.json file
tsc ---------------> this command will now compile all the ts files in the project
tsc --watch -------> with the watch mode on


In the tsconfig.js file some of the common configurations are

"compilerOptions": {
   "target": "es5", -----------> what js version you want 
   "lib": ["dom", "es6", "dom.iterable", scripthost], -----------> all the dom apis, es6 features is now ready to be used in your ts files
                                                                   otherwise if we use document.querySelector, how will ts know about document object
   "sourceMap": true, ------------> if you now go to the page sources in the browser we will see ts files and can debug there instead of seeing the compiled js files
   "outDir": "./dist", -----------> the compiled js files will now be placed in the dist folder
   "rootDir": "./src", -----------> the ts compiler will look at the src folder and compile the ts files into dist folder, keeping the folder str intact.
   "removeComments": true, -------> removes comments from the compiled js files
   "noEmitOnError": true, --------> the compiler will not emit any js files if there is a compilation error
   "stict": true, ----------------> strict type-checking
   "noUnusedParameters": true,----> report errors on unused parameters
   "noUnusedLocals": true, -------> report errors on unused local variables
   "noImplicitReturn": true ------> throws an error when the function doesn't return a value for some cases despite expecting a return
   "paths": {
      "@/*": ["./*"],
      "@/components/*": [./frontend/components/*] --------> now the import lines will be concise
    }
}
"exclude": [
   "node_modules", ------------> (node_modules will be excluded by default) this config will exclude all ts files inside node_modules from getting compiled
]
