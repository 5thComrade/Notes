Next JS

===================================================================================================================================
- Named/Static Routes
One can create a new file inside the pages folder and that then becomes the route.

pages
  index.js ----> https://domain.com/
  about.js ----> https://domain.com/about/
  
OR

pages
  index.js ----> https://domain.com/
  about
    index.js --> https://domain.com/about/
    antony.js -> https://domain.com/about/antony/

===================================================================================================================================
- Dynamic Routes
One can create a file using a special syntax to create dynamic routes.

pages
  index.js -----> https://domain.com/
  blog
    index.js ---> https://domain.com/blog/
    [id].js ----> https://domain.com/blog/1478
 
Extracting dynamic paths from the url

import { useRouter } from "next/router"

function Component = () => {
    const router = useRouter()
    
    console.log(router.pathname) ---> /blog/[id]
    console.log(router.query) -----> {id: "1478"}
    
    return <div>Hello World!</div>
}
===================================================================================================================================
- Nested Dynamic Routes

pages
  index.js
  clients
     index.js
     [id]
        index.js
        [projectId].js ---> router.query -> {id: '1234', 'projectId': '5678'}
     
==================================================================================================================================
- Catch All Routes

pages
  index.js
  blog
    [...id].js --------> catch all route ie: https://domain.com/blog/2022/12
                         router.query will give you {id: ["2022", "12"]}
                         
===================================================================================================================================
- Navigation

import Link from 'next/link'

function Home() {
  return (
    <div>
      <Link replace href="/dashboard">Login</Link>
      <Link href="/about">About</Link>
    </div>
  )
} 

One can use a different syntax for the href in Link component

<Link href={{
  pathname: '/client/[id]',
  query: {
    id: "1234"
  }
}}>
    Client
</Link>

==================================================================================================================================
- Navigating Programmatically

const handleLogin = () => {
  router.replace('/dashboard') -----> we can also use the object notion here too
  OR 
  router.push('/dashboard')
}

<button onClick={handleLogin}>Login</button>

==================================================================================================================================
- Custom 404 pages

pages
  404.jsx -------> custom 404 page
  
===================================================================================================================================
